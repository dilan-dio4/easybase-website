(this["webpackJsonpeasybase-website-react-demo"]=this["webpackJsonpeasybase-website-react-demo"]||[]).push([[0],{115:function(e,n,t){},116:function(e,n,t){},153:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),i=t(15),s=t.n(i),o=(t(115),t.p,t(116),t(14)),l=t(65),c=t(3);function u(){var e=Object(r.useRef)(null);return Object(c.jsx)(l.a,{height:"100vh",defaultLanguage:"typescript",defaultValue:"/*\n * Abbreviated easybase-react example code demonstrating:\n *   User authentication\n *   Stateful Database\n *   Complex query example\n *   User-associated database\n * \n * Full walkthrough: https://easybase.io/react/\n */\nimport { useEffect, useState } from 'react'\nimport { useEasybase, EasybaseProvider, callFunction } from 'easybase-react'\nimport ebconfig from './ebconfig'\n\nexport default function App() {\n    return (\n        <EasybaseProvider ebconfig={ebconfig}>\n            <NavBar />\n            <Popular />\n            <Home />\n            <Starred />\n        </EasybaseProvider>\n    )\n}\n\nfunction Home() {\n    const [minRating, setMinRating] = useState(0)\n    const [titleStarts, setTitleStarts] = useState(\"\")\n    const [sortBy, setSortBy] = useState(\"\")\n\n    // 'e' is database expressions and operations: https://bit.ly/3f6bK0B\n    const { db, e, useReturn } = useEasybase()\n\n    // Stateful data frame that refreshes on changes across project components\n    const { frame, loading } = useReturn(() => db('MOVIES').return().where(\n        e.and(                                  // Where 'AND' clause:\n            e.gt('rating', minRating),          // e.gt = \"Greater than\"\n            e.like('title', titleStarts + \"%\")  // e.like = \"String Regex\"\n        )\n    ).orderBy(                                   \n        sortBy ?\n            { by: sortBy, sort: \"asc\" } :       // If sortBy, use that value\n            { by: \"_position\", sort: \"asc\" }    // Else sort by default position\n    ), [minRating, titleStarts, sortBy])        // Dependency array\n\n    if (loading) return <Spinner />\n    return (\n        <div>\n            {/* Changing these stateful variables re-fetches useReturn hook */}\n            <Input value={minRating} onValueChange={setMinRating} />\n            <Input value={titleStarts} onValueChange={setTitleStarts} />\n            <AddCardButton />\n            {frame.map(ele => <Card {...ele} />)}\n        </div>\n    )\n}\n\nfunction AddCardButton() {\n    const { isUserSignedIn, db } = useEasybase()\n\n    const onAddCard = (title, rating, image, released) => {\n        db('MOVIES').insert({ title, rating, image, released }).one()\n        // ^ Automatically refreshes useReturn hook in 'Home' component\n    }\n\n    return (\n        <Button onSubmit={onAddCard}>\n            {/* Add Card Dialog */}\n        </Button>\n    )\n}\n\nfunction Starred() {\n    const [inlineData, setInlineData] = useState([])\n    const { db, isUserSignedIn } = useEasybase()\n\n    useEffect(() => {\n        async function mounted() {\n            if (isUserSignedIn()) {\n                // Set second parameter to 'true' to only retrieve user records\n                const res = await db('STARS', true).return().all()\n                setInlineData(res)\n            } else {\n                signInDialog();\n            }\n        }\n        mounted();\n    }, [])\n\n    return <div>{inlineData.map(ele => <Card {...ele} />)}</div>\n}\n\nfunction NavBar() {\n    const {\n        signIn,\n        signUp,\n        isUserSignedIn,\n        signOut\n    } = useEasybase();\n    \n    async function onSignInClick() {\n        const { username, password } = signInDialog();\n        await signIn(username, password);\n        // ^ If successful, sets isUserSignedIn to 'true'\n    }\n\n    return (\n        <nav>\n            <Link to=\"/popular\">Popular</Link>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/starred\">Starred</Link>\n            {isUserSignedIn ?\n                <button onClick={signOut}>Sign Out</button>\n            :\n                <button onClick={onSignInClick}>Sign In</button>\n            }\n        </nav>\n    )\n}\n\nfunction Popular() {\n    const [cloudData, setCloudData] = useState(null)\n\n    useEffect(() => {\n        async function mounted() {\n            const res = await callFunction('d6f217bde0b6b4d-cloud-func', {\n                date: new Date().toString(),\n                message: \"Find me in event.body\"\n            });\n            setCloudData(res)\n        }\n        mounted();\n    }, [])\n\n    if (!cloudData) return <Spinner />\n    return <Card {...cloudData} />\n}\n",onMount:function(n,t){e.current=n,t.languages.typescript.typescriptDefaults.addExtraLib("declare module 'react' { ".concat("\n// Type definitions for React 17.0\n// Project: http://facebook.github.io/react/\n// Definitions by: Asana <https://asana.com>\n//                 AssureSign <http://www.assuresign.com>\n//                 Microsoft <https://microsoft.com>\n//                 John Reilly <https://github.com/johnnyreilly>\n//                 Benoit Benezech <https://github.com/bbenezech>\n//                 Patricio Zavolinsky <https://github.com/pzavolinsky>\n//                 Digiguru <https://github.com/digiguru>\n//                 Eric Anderson <https://github.com/ericanderson>\n//                 Dovydas Navickas <https://github.com/DovydasNavickas>\n//                 Josh Rutherford <https://github.com/theruther4d>\n//                 Guilherme H\xfcbner <https://github.com/guilhermehubner>\n//                 Ferdy Budhidharma <https://github.com/ferdaber>\n//                 Johann Rakotoharisoa <https://github.com/jrakotoharisoa>\n//                 Olivier Pascal <https://github.com/pascaloliv>\n//                 Martin Hochel <https://github.com/hotell>\n//                 Frank Li <https://github.com/franklixuefei>\n//                 Jessica Franco <https://github.com/Jessidhia>\n//                 Saransh Kataria <https://github.com/saranshkataria>\n//                 Kanitkorn Sujautra <https://github.com/lukyth>\n//                 Sebastian Silbermann <https://github.com/eps1lon>\n//                 Kyle Scully <https://github.com/zieka>\n//                 Cong Zhang <https://github.com/dancerphil>\n//                 Dimitri Mitropoulos <https://github.com/dimitropoulos>\n//                 JongChan Choi <https://github.com/disjukr>\n//                 Victor Magalh\xe3es <https://github.com/vhfmag>\n//                 Dale Tan <https://github.com/hellatan>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\nimport { Interaction as SchedulerInteraction } from 'scheduler/tracing';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\ntype Booleanish = boolean | 'true' | 'false';\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n// Destructors are only allowed to return void.\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\n\n// tslint:disable-next-line:export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    type ElementType<P = any> =\n        {\n            [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n        }[keyof JSX.IntrinsicElements] |\n        ComponentType<P>;\n\n    type ReactType<P = any> = ElementType<P>;\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    type JSXElementConstructor<P> =\n        | ((props: P) => ReactElement<any, any> | null)\n        | (new (props: P) => Component<P, any>);\n\n    interface RefObject<T> {\n        readonly current: T | null;\n    }\n    type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    type LegacyRef<T> = string | Ref<T>;\n\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new (props: any): Component<any> }\n            | ((props: any, context?: any) => ReactElement | null)\n            | keyof JSX.IntrinsicElements\n    > =\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends Ref<\n                infer Instance\n            >\n                ? Instance\n                : never\n            : never;\n\n    type ComponentState = any;\n\n    type Key = string | number;\n\n    /**\n     * @internal You shouldn't need to use this type since you never see these attributes\n     * inside your component or have to validate them.\n     */\n    interface Attributes {\n        key?: Key | null;\n    }\n    interface RefAttributes<T> extends Attributes {\n        ref?: Ref<T>;\n    }\n    interface ClassAttributes<T> extends Attributes {\n        ref?: LegacyRef<T>;\n    }\n\n    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n        type: T;\n        props: P;\n        key: Key | null;\n    }\n\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n    > extends ReactElement<P, Exclude<T, number>> { }\n\n\n    type SFCElement<P> = FunctionComponentElement<P>;\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: 'ref' extends keyof P ? P extends { ref?: infer R } ? R : never : never;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T>;\n    }\n\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        key: Key | null;\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> =\n        (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n    }\n\n    //\n    // React Nodes\n    // http://facebook.github.io/react/docs/glossary.html\n    // ----------------------------------------------------------------------\n\n    type ReactText = string | number;\n    type ReactChild = ReactElement | ReactText;\n\n    interface ReactNodeArray extends Array<ReactNode> {}\n    type ReactFragment = {} | ReactNodeArray;\n    type ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function createElement<P extends {}>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\n        props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n        ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // Context via RenderProps\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode;\n    }\n\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    // TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n    // forwardRef and memo are actually objects that are treated specially by the renderer; see:\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n    // However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n    // by pretending to be a normal component.\n    //\n    // We don't just use ComponentType or SFC types because you are not supposed to attach statics to this\n    // object, but rather to the original function.\n    interface ExoticComponent<P = {}> {\n        /**\n         * **NOTE**: Exotic components are not callable.\n         */\n        (props: P): (ReactElement|null);\n        readonly $$typeof: symbol;\n    }\n\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        displayName?: string;\n    }\n\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    // NOTE: only the Context object itself can get a displayName\n    // https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        displayName?: string;\n    }\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    const Children: ReactChildren;\n    const Fragment: ExoticComponent<{ children?: ReactNode }>;\n    const StrictMode: ExoticComponent<{ children?: ReactNode }>;\n\n    interface SuspenseProps {\n        children?: ReactNode;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback: NonNullable<ReactNode>|null;\n    }\n    /**\n     * This feature is not yet available for server-side rendering.\n     * Suspense support will be added in a later release.\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * {@link https://reactjs.org/docs/profiler.html#onrender-callback Profiler API}\n     */\n    type ProfilerOnRenderCallback = (\n        id: string,\n        phase: \"mount\" | \"update\",\n        actualDuration: number,\n        baseDuration: number,\n        startTime: number,\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n    interface ProfilerProps {\n        children?: ReactNode;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\n    class Component<P, S> {\n        // tslint won't let me format the sample code in a way that vscode likes it :(\n        static contextType?: Context<any>;\n\n        // TODO (TypeScript 3.0): unknown\n        context: any;\n\n        constructor(props: Readonly<P> | P);\n        /**\n         * @deprecated\n         * @see https://reactjs.org/docs/legacy-context.html\n         */\n        constructor(props: P, context: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\n            callback?: () => void\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        readonly props: Readonly<P> & Readonly<{ children?: ReactNode }>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         * https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n         */\n        refs: {\n            [key: string]: ReactInstance\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    type SFC<P = {}> = FunctionComponent<P>;\n\n    type StatelessComponent<P = {}> = FunctionComponent<P>;\n\n    type FC<P = {}> = FunctionComponent<P>;\n\n    interface FunctionComponent<P = {}> {\n        (props: PropsWithChildren<P>, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P>;\n        contextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    type VFC<P = {}> = VoidFunctionComponent<P>;\n\n    interface VoidFunctionComponent<P = {}> {\n        (props: P, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P>;\n        contextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;\n\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: PropsWithChildren<P>, ref: ForwardedRef<T>): ReactElement | null;\n        displayName?: string;\n        // https://github.com/microsoft/TypeScript/issues/36826\n        /**\n         * defaultProps are not supported on render functions\n         */\n        defaultProps?: never;\n        /**\n         * propTypes are not supported on render functions\n         */\n        propTypes?: never;\n    }\n\n    /**\n     * @deprecated Use ForwardRefRenderFunction. forwardRef doesn't accept a\n     *             \"real\" component.\n     */\n    interface RefForwardingComponent <T, P = {}> extends ForwardRefRenderFunction<T, P> {}\n\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new (props: P, context?: any): Component<P, S>;\n        propTypes?: WeakValidationMap<P>;\n        contextType?: Context<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n        defaultProps?: Partial<P>;\n        displayName?: string;\n    }\n\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new (props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * We use an intersection type to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        C &\n        (new (props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S>;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S>;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        componentWillMount?(): void;\n\n        UNSAFE_componentWillMount?(): void;\n\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>>;\n        statics?: {\n            [key: string]: any;\n        };\n\n        displayName?: string;\n        propTypes?: ValidationMap<any>;\n        contextTypes?: ValidationMap<any>;\n        childContextTypes?: ValidationMap<any>;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    // but can be given its own specific name\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P>;\n        propTypes?: WeakValidationMap<P>;\n    }\n\n    function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /** Ensures that the props do not include ref at all */\n    type PropsWithoutRef<P> =\n        // Just Pick would be sufficient for this, but I'm trying to avoid unnecessary mapping over union types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        'ref' extends keyof P\n            ? Pick<P, Exclude<keyof P, 'ref'>>\n            : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        'ref' extends keyof P\n            ? P extends { ref?: infer R }\n                ? string extends R\n                    ? PropsWithoutRef<P> & { ref?: Exclude<R, string> }\n                    : P\n                : P\n            : P;\n\n    type PropsWithChildren<P> = P & { children?: ReactNode };\n\n    /**\n     * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n     * or ComponentPropsWithoutRef when refs are not supported.\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\n        T extends JSXElementConstructor<infer P>\n            ? P\n            : T extends keyof JSX.IntrinsicElements\n                ? JSX.IntrinsicElements[T]\n                : {};\n    type ComponentPropsWithRef<T extends ElementType> =\n        T extends ComponentClass<infer P>\n            ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n            : PropsWithRef<ComponentProps<T>>;\n    type ComponentPropsWithoutRef<T extends ElementType> =\n        PropsWithoutRef<ComponentProps<T>>;\n\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    function memo<P extends object>(\n        Component: SFC<P>,\n        propsAreEqual?: (prevProps: Readonly<PropsWithChildren<P>>, nextProps: Readonly<PropsWithChildren<P>>) => boolean\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n    ): MemoExoticComponent<T>;\n\n    type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly _result: T;\n    };\n\n    function lazy<T extends ComponentType<any>>(\n        factory: () => Promise<{ default: T }>\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    // based on the code in https://github.com/facebook/react/pull/13968\n\n    // Unlike the class component setState, the updates are not allowed to be partial\n    type SetStateAction<S> = S | ((prevState: S) => S);\n    // this technically does accept a second argument, but it's already under a deprecation warning\n    // and it's not even released so probably better to not define it.\n    type Dispatch<A> = (value: A) => void;\n    // Since action _can_ be undefined, dispatch may be called without any parameters.\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> =\n        R extends ReducerWithoutAction<infer S> ? S : never;\n    // TODO (TypeScript 3.0): ReadonlyArray<unknown>\n    type DependencyList = ReadonlyArray<any>;\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    type EffectCallback = () => (void | Destructor);\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n\n    function useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is omitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#usestate\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T>(initialValue: T|null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n\n    // TODO (TypeScript 3.0): <T extends unknown>\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see https://reactjs.org/docs/hooks-reference.html#useeffect\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n\n    function useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n\n    // TODO (TypeScript 3.0): <T extends (...args: never[]) => unknown>\n    function useCallback<T extends (...args: any[]) => any>(callback: T, deps: DependencyList): T;\n\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: 'mouse' | 'pen' | 'touch';\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<T = Element> extends SyntheticEvent<T, NativeFocusEvent> {\n        relatedTarget: EventTarget | null;\n        target: EventTarget & T;\n    }\n\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface KeyboardEvent<T = Element> extends SyntheticEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        code: string;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    interface Props<T> {\n        children?: ReactNode;\n        key?: Key;\n        ref?: LegacyRef<T>;\n    }\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface DOMAttributes<T> {\n        children?: ReactNode;\n        dangerouslySetInnerHTML?: {\n            __html: string;\n        };\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T>;\n        onCopyCapture?: ClipboardEventHandler<T>;\n        onCut?: ClipboardEventHandler<T>;\n        onCutCapture?: ClipboardEventHandler<T>;\n        onPaste?: ClipboardEventHandler<T>;\n        onPasteCapture?: ClipboardEventHandler<T>;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T>;\n        onCompositionEndCapture?: CompositionEventHandler<T>;\n        onCompositionStart?: CompositionEventHandler<T>;\n        onCompositionStartCapture?: CompositionEventHandler<T>;\n        onCompositionUpdate?: CompositionEventHandler<T>;\n        onCompositionUpdateCapture?: CompositionEventHandler<T>;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T>;\n        onFocusCapture?: FocusEventHandler<T>;\n        onBlur?: FocusEventHandler<T>;\n        onBlurCapture?: FocusEventHandler<T>;\n\n        // Form Events\n        onChange?: FormEventHandler<T>;\n        onChangeCapture?: FormEventHandler<T>;\n        onBeforeInput?: FormEventHandler<T>;\n        onBeforeInputCapture?: FormEventHandler<T>;\n        onInput?: FormEventHandler<T>;\n        onInputCapture?: FormEventHandler<T>;\n        onReset?: FormEventHandler<T>;\n        onResetCapture?: FormEventHandler<T>;\n        onSubmit?: FormEventHandler<T>;\n        onSubmitCapture?: FormEventHandler<T>;\n        onInvalid?: FormEventHandler<T>;\n        onInvalidCapture?: FormEventHandler<T>;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T>;\n        onLoadCapture?: ReactEventHandler<T>;\n        onError?: ReactEventHandler<T>; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T>; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T>;\n        onKeyDownCapture?: KeyboardEventHandler<T>;\n        onKeyPress?: KeyboardEventHandler<T>;\n        onKeyPressCapture?: KeyboardEventHandler<T>;\n        onKeyUp?: KeyboardEventHandler<T>;\n        onKeyUpCapture?: KeyboardEventHandler<T>;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T>;\n        onAbortCapture?: ReactEventHandler<T>;\n        onCanPlay?: ReactEventHandler<T>;\n        onCanPlayCapture?: ReactEventHandler<T>;\n        onCanPlayThrough?: ReactEventHandler<T>;\n        onCanPlayThroughCapture?: ReactEventHandler<T>;\n        onDurationChange?: ReactEventHandler<T>;\n        onDurationChangeCapture?: ReactEventHandler<T>;\n        onEmptied?: ReactEventHandler<T>;\n        onEmptiedCapture?: ReactEventHandler<T>;\n        onEncrypted?: ReactEventHandler<T>;\n        onEncryptedCapture?: ReactEventHandler<T>;\n        onEnded?: ReactEventHandler<T>;\n        onEndedCapture?: ReactEventHandler<T>;\n        onLoadedData?: ReactEventHandler<T>;\n        onLoadedDataCapture?: ReactEventHandler<T>;\n        onLoadedMetadata?: ReactEventHandler<T>;\n        onLoadedMetadataCapture?: ReactEventHandler<T>;\n        onLoadStart?: ReactEventHandler<T>;\n        onLoadStartCapture?: ReactEventHandler<T>;\n        onPause?: ReactEventHandler<T>;\n        onPauseCapture?: ReactEventHandler<T>;\n        onPlay?: ReactEventHandler<T>;\n        onPlayCapture?: ReactEventHandler<T>;\n        onPlaying?: ReactEventHandler<T>;\n        onPlayingCapture?: ReactEventHandler<T>;\n        onProgress?: ReactEventHandler<T>;\n        onProgressCapture?: ReactEventHandler<T>;\n        onRateChange?: ReactEventHandler<T>;\n        onRateChangeCapture?: ReactEventHandler<T>;\n        onSeeked?: ReactEventHandler<T>;\n        onSeekedCapture?: ReactEventHandler<T>;\n        onSeeking?: ReactEventHandler<T>;\n        onSeekingCapture?: ReactEventHandler<T>;\n        onStalled?: ReactEventHandler<T>;\n        onStalledCapture?: ReactEventHandler<T>;\n        onSuspend?: ReactEventHandler<T>;\n        onSuspendCapture?: ReactEventHandler<T>;\n        onTimeUpdate?: ReactEventHandler<T>;\n        onTimeUpdateCapture?: ReactEventHandler<T>;\n        onVolumeChange?: ReactEventHandler<T>;\n        onVolumeChangeCapture?: ReactEventHandler<T>;\n        onWaiting?: ReactEventHandler<T>;\n        onWaitingCapture?: ReactEventHandler<T>;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T>;\n        onAuxClickCapture?: MouseEventHandler<T>;\n        onClick?: MouseEventHandler<T>;\n        onClickCapture?: MouseEventHandler<T>;\n        onContextMenu?: MouseEventHandler<T>;\n        onContextMenuCapture?: MouseEventHandler<T>;\n        onDoubleClick?: MouseEventHandler<T>;\n        onDoubleClickCapture?: MouseEventHandler<T>;\n        onDrag?: DragEventHandler<T>;\n        onDragCapture?: DragEventHandler<T>;\n        onDragEnd?: DragEventHandler<T>;\n        onDragEndCapture?: DragEventHandler<T>;\n        onDragEnter?: DragEventHandler<T>;\n        onDragEnterCapture?: DragEventHandler<T>;\n        onDragExit?: DragEventHandler<T>;\n        onDragExitCapture?: DragEventHandler<T>;\n        onDragLeave?: DragEventHandler<T>;\n        onDragLeaveCapture?: DragEventHandler<T>;\n        onDragOver?: DragEventHandler<T>;\n        onDragOverCapture?: DragEventHandler<T>;\n        onDragStart?: DragEventHandler<T>;\n        onDragStartCapture?: DragEventHandler<T>;\n        onDrop?: DragEventHandler<T>;\n        onDropCapture?: DragEventHandler<T>;\n        onMouseDown?: MouseEventHandler<T>;\n        onMouseDownCapture?: MouseEventHandler<T>;\n        onMouseEnter?: MouseEventHandler<T>;\n        onMouseLeave?: MouseEventHandler<T>;\n        onMouseMove?: MouseEventHandler<T>;\n        onMouseMoveCapture?: MouseEventHandler<T>;\n        onMouseOut?: MouseEventHandler<T>;\n        onMouseOutCapture?: MouseEventHandler<T>;\n        onMouseOver?: MouseEventHandler<T>;\n        onMouseOverCapture?: MouseEventHandler<T>;\n        onMouseUp?: MouseEventHandler<T>;\n        onMouseUpCapture?: MouseEventHandler<T>;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T>;\n        onSelectCapture?: ReactEventHandler<T>;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T>;\n        onTouchCancelCapture?: TouchEventHandler<T>;\n        onTouchEnd?: TouchEventHandler<T>;\n        onTouchEndCapture?: TouchEventHandler<T>;\n        onTouchMove?: TouchEventHandler<T>;\n        onTouchMoveCapture?: TouchEventHandler<T>;\n        onTouchStart?: TouchEventHandler<T>;\n        onTouchStartCapture?: TouchEventHandler<T>;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T>;\n        onPointerDownCapture?: PointerEventHandler<T>;\n        onPointerMove?: PointerEventHandler<T>;\n        onPointerMoveCapture?: PointerEventHandler<T>;\n        onPointerUp?: PointerEventHandler<T>;\n        onPointerUpCapture?: PointerEventHandler<T>;\n        onPointerCancel?: PointerEventHandler<T>;\n        onPointerCancelCapture?: PointerEventHandler<T>;\n        onPointerEnter?: PointerEventHandler<T>;\n        onPointerEnterCapture?: PointerEventHandler<T>;\n        onPointerLeave?: PointerEventHandler<T>;\n        onPointerLeaveCapture?: PointerEventHandler<T>;\n        onPointerOver?: PointerEventHandler<T>;\n        onPointerOverCapture?: PointerEventHandler<T>;\n        onPointerOut?: PointerEventHandler<T>;\n        onPointerOutCapture?: PointerEventHandler<T>;\n        onGotPointerCapture?: PointerEventHandler<T>;\n        onGotPointerCaptureCapture?: PointerEventHandler<T>;\n        onLostPointerCapture?: PointerEventHandler<T>;\n        onLostPointerCaptureCapture?: PointerEventHandler<T>;\n\n        // UI Events\n        onScroll?: UIEventHandler<T>;\n        onScrollCapture?: UIEventHandler<T>;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T>;\n        onWheelCapture?: WheelEventHandler<T>;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T>;\n        onAnimationStartCapture?: AnimationEventHandler<T>;\n        onAnimationEnd?: AnimationEventHandler<T>;\n        onAnimationEndCapture?: AnimationEventHandler<T>;\n        onAnimationIteration?: AnimationEventHandler<T>;\n        onAnimationIterationCapture?: AnimationEventHandler<T>;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T>;\n        onTransitionEndCapture?: TransitionEventHandler<T>;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        'aria-activedescendant'?: string;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        'aria-atomic'?: boolean | 'false' | 'true';\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both';\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        'aria-busy'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        'aria-checked'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        'aria-colcount'?: number;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        'aria-colindex'?: number;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        'aria-colspan'?: number;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        'aria-controls'?: string;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time';\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        'aria-describedby'?: string;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        'aria-details'?: string;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        'aria-disabled'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup';\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        'aria-errormessage'?: string;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        'aria-expanded'?: boolean | 'false' | 'true';\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        'aria-flowto'?: string;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-grabbed'?: boolean | 'false' | 'true';\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        'aria-hidden'?: boolean | 'false' | 'true';\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling';\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        'aria-keyshortcuts'?: string;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        'aria-label'?: string;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        'aria-labelledby'?: string;\n        /** Defines the hierarchical level of an element within a structure. */\n        'aria-level'?: number;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        'aria-live'?: 'off' | 'assertive' | 'polite';\n        /** Indicates whether an element is modal when displayed. */\n        'aria-modal'?: boolean | 'false' | 'true';\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        'aria-multiline'?: boolean | 'false' | 'true';\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        'aria-multiselectable'?: boolean | 'false' | 'true';\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        'aria-orientation'?: 'horizontal' | 'vertical';\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        'aria-owns'?: string;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        'aria-placeholder'?: string;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        'aria-posinset'?: number;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        'aria-pressed'?: boolean | 'false' | 'mixed' | 'true';\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        'aria-readonly'?: boolean | 'false' | 'true';\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        'aria-relevant'?: 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text' | 'text additions' | 'text removals';\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        'aria-required'?: boolean | 'false' | 'true';\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        'aria-roledescription'?: string;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        'aria-rowcount'?: number;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        'aria-rowindex'?: number;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        'aria-rowspan'?: number;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        'aria-selected'?: boolean | 'false' | 'true';\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        'aria-setsize'?: number;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other';\n        /** Defines the maximum allowed value for a range widget. */\n        'aria-valuemax'?: number;\n        /** Defines the minimum allowed value for a range widget. */\n        'aria-valuemin'?: number;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        'aria-valuenow'?: number;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        'aria-valuetext'?: string;\n    }\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean;\n        defaultValue?: string | number | ReadonlyArray<string>;\n        suppressContentEditableWarning?: boolean;\n        suppressHydrationWarning?: boolean;\n\n        // Standard HTML Attributes\n        accessKey?: string;\n        className?: string;\n        contentEditable?: Booleanish | \"inherit\";\n        contextMenu?: string;\n        dir?: string;\n        draggable?: Booleanish;\n        hidden?: boolean;\n        id?: string;\n        lang?: string;\n        placeholder?: string;\n        slot?: string;\n        spellCheck?: Booleanish;\n        style?: CSSProperties;\n        tabIndex?: number;\n        title?: string;\n        translate?: 'yes' | 'no';\n\n        // Unknown\n        radioGroup?: string; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: string;\n\n        // RDFa Attributes\n        about?: string;\n        datatype?: string;\n        inlist?: any;\n        prefix?: string;\n        property?: string;\n        resource?: string;\n        typeof?: string;\n        vocab?: string;\n\n        // Non-standard Attributes\n        autoCapitalize?: string;\n        autoCorrect?: string;\n        autoSave?: string;\n        color?: string;\n        itemProp?: string;\n        itemScope?: boolean;\n        itemType?: string;\n        itemID?: string;\n        itemRef?: string;\n        results?: number;\n        security?: string;\n        unselectable?: 'on' | 'off';\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n         */\n        inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n         */\n        is?: string;\n    }\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string;\n        acceptCharset?: string;\n        action?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        alt?: string;\n        as?: string;\n        async?: boolean;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        autoPlay?: boolean;\n        capture?: boolean | string;\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        charSet?: string;\n        challenge?: string;\n        checked?: boolean;\n        cite?: string;\n        classID?: string;\n        cols?: number;\n        colSpan?: number;\n        content?: string;\n        controls?: boolean;\n        coords?: string;\n        crossOrigin?: string;\n        data?: string;\n        dateTime?: string;\n        default?: boolean;\n        defer?: boolean;\n        disabled?: boolean;\n        download?: any;\n        encType?: string;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        frameBorder?: number | string;\n        headers?: string;\n        height?: number | string;\n        high?: number;\n        href?: string;\n        hrefLang?: string;\n        htmlFor?: string;\n        httpEquiv?: string;\n        integrity?: string;\n        keyParams?: string;\n        keyType?: string;\n        kind?: string;\n        label?: string;\n        list?: string;\n        loop?: boolean;\n        low?: number;\n        manifest?: string;\n        marginHeight?: number;\n        marginWidth?: number;\n        max?: number | string;\n        maxLength?: number;\n        media?: string;\n        mediaGroup?: string;\n        method?: string;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        muted?: boolean;\n        name?: string;\n        nonce?: string;\n        noValidate?: boolean;\n        open?: boolean;\n        optimum?: number;\n        pattern?: string;\n        placeholder?: string;\n        playsInline?: boolean;\n        poster?: string;\n        preload?: string;\n        readOnly?: boolean;\n        rel?: string;\n        required?: boolean;\n        reversed?: boolean;\n        rows?: number;\n        rowSpan?: number;\n        sandbox?: string;\n        scope?: string;\n        scoped?: boolean;\n        scrolling?: string;\n        seamless?: boolean;\n        selected?: boolean;\n        shape?: string;\n        size?: number;\n        sizes?: string;\n        span?: number;\n        src?: string;\n        srcDoc?: string;\n        srcLang?: string;\n        srcSet?: string;\n        start?: number;\n        step?: number | string;\n        summary?: string;\n        target?: string;\n        type?: string;\n        useMap?: string;\n        value?: string | ReadonlyArray<string> | number;\n        width?: number | string;\n        wmode?: string;\n        wrap?: string;\n    }\n\n    type HTMLAttributeReferrerPolicy =\n        | ''\n        | 'no-referrer'\n        | 'no-referrer-when-downgrade'\n        | 'origin'\n        | 'origin-when-cross-origin'\n        | 'same-origin'\n        | 'strict-origin'\n        | 'strict-origin-when-cross-origin'\n        | 'unsafe-url';\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        ping?: string;\n        rel?: string;\n        target?: string;\n        type?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n    }\n\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        coords?: string;\n        download?: any;\n        href?: string;\n        hrefLang?: string;\n        media?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        rel?: string;\n        shape?: string;\n        target?: string;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string;\n        target?: string;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        name?: string;\n        type?: 'submit' | 'reset' | 'button';\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        width?: number | string;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n        width?: number | string;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n        onToggle?: ReactEventHandler<T>;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string;\n        src?: string;\n        type?: string;\n        width?: number | string;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        form?: string;\n        name?: string;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string;\n        action?: string;\n        autoComplete?: string;\n        encType?: string;\n        method?: string;\n        name?: string;\n        noValidate?: boolean;\n        target?: string;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string;\n        allowFullScreen?: boolean;\n        allowTransparency?: boolean;\n        /** @deprecated */\n        frameBorder?: number | string;\n        height?: number | string;\n        loading?: \"eager\" | \"lazy\";\n        /** @deprecated */\n        marginHeight?: number;\n        /** @deprecated */\n        marginWidth?: number;\n        name?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        sandbox?: string;\n        /** @deprecated */\n        scrolling?: string;\n        seamless?: boolean;\n        src?: string;\n        srcDoc?: string;\n        width?: number | string;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n        decoding?: \"async\" | \"auto\" | \"sync\";\n        height?: number | string;\n        loading?: \"eager\" | \"lazy\";\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        useMap?: string;\n        width?: number | string;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n        dateTime?: string;\n    }\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string;\n        alt?: string;\n        autoComplete?: string;\n        autoFocus?: boolean;\n        capture?: boolean | string; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean;\n        crossOrigin?: string;\n        disabled?: boolean;\n        enterKeyHint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\n        form?: string;\n        formAction?: string;\n        formEncType?: string;\n        formMethod?: string;\n        formNoValidate?: boolean;\n        formTarget?: string;\n        height?: number | string;\n        list?: string;\n        max?: number | string;\n        maxLength?: number;\n        min?: number | string;\n        minLength?: number;\n        multiple?: boolean;\n        name?: string;\n        pattern?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        size?: number;\n        src?: string;\n        step?: number | string;\n        type?: string;\n        value?: string | ReadonlyArray<string> | number;\n        width?: number | string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoFocus?: boolean;\n        challenge?: string;\n        disabled?: boolean;\n        form?: string;\n        keyType?: string;\n        keyParams?: string;\n        name?: string;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string;\n        crossOrigin?: string;\n        href?: string;\n        hrefLang?: string;\n        integrity?: string;\n        media?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        rel?: string;\n        sizes?: string;\n        type?: string;\n        charSet?: string;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean;\n        controls?: boolean;\n        controlsList?: string;\n        crossOrigin?: string;\n        loop?: boolean;\n        mediaGroup?: string;\n        muted?: boolean;\n        playsInline?: boolean;\n        preload?: string;\n        src?: string;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string;\n        content?: string;\n        httpEquiv?: string;\n        name?: string;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        high?: number;\n        low?: number;\n        max?: number | string;\n        min?: number | string;\n        optimum?: number;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string;\n        data?: string;\n        form?: string;\n        height?: number | string;\n        name?: string;\n        type?: string;\n        useMap?: string;\n        width?: number | string;\n        wmode?: string;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean;\n        start?: number;\n        type?: '1' | 'a' | 'A' | 'i' | 'I';\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean;\n        label?: string;\n        selected?: boolean;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string;\n        htmlFor?: string;\n        name?: string;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string;\n        value?: string | ReadonlyArray<string> | number;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean;\n        /** @deprecated */\n        charSet?: string;\n        crossOrigin?: string;\n        defer?: boolean;\n        integrity?: string;\n        noModule?: boolean;\n        nonce?: string;\n        referrerPolicy?: HTMLAttributeReferrerPolicy;\n        src?: string;\n        type?: string;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        disabled?: boolean;\n        form?: string;\n        multiple?: boolean;\n        name?: string;\n        required?: boolean;\n        size?: number;\n        value?: string | ReadonlyArray<string> | number;\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        sizes?: string;\n        src?: string;\n        srcSet?: string;\n        type?: string;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string;\n        nonce?: string;\n        scoped?: boolean;\n        type?: string;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        cellPadding?: number | string;\n        cellSpacing?: number | string;\n        summary?: string;\n        width?: number | string;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string;\n        autoFocus?: boolean;\n        cols?: number;\n        dirName?: string;\n        disabled?: boolean;\n        form?: string;\n        maxLength?: number;\n        minLength?: number;\n        name?: string;\n        placeholder?: string;\n        readOnly?: boolean;\n        required?: boolean;\n        rows?: number;\n        value?: string | ReadonlyArray<string> | number;\n        wrap?: string;\n\n        onChange?: ChangeEventHandler<T>;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n        abbr?: string;\n        height?: number | string;\n        width?: number | string;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\";\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\";\n        colSpan?: number;\n        headers?: string;\n        rowSpan?: number;\n        scope?: string;\n        abbr?: string;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean;\n        kind?: string;\n        label?: string;\n        src?: string;\n        srcLang?: string;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string;\n        playsInline?: boolean;\n        poster?: string;\n        width?: number | string;\n        disablePictureInPicture?: boolean;\n        disableRemotePlayback?: boolean;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string;\n        color?: string;\n        height?: number | string;\n        id?: string;\n        lang?: string;\n        max?: number | string;\n        media?: string;\n        method?: string;\n        min?: number | string;\n        name?: string;\n        style?: CSSProperties;\n        target?: string;\n        type?: string;\n        width?: number | string;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: string;\n        tabIndex?: number;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n\n        // SVG Specific attributes\n        accentHeight?: number | string;\n        accumulate?: \"none\" | \"sum\";\n        additive?: \"replace\" | \"sum\";\n        alignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n        \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\";\n        allowReorder?: \"no\" | \"yes\";\n        alphabetic?: number | string;\n        amplitude?: number | string;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\";\n        ascent?: number | string;\n        attributeName?: string;\n        attributeType?: string;\n        autoReverse?: Booleanish;\n        azimuth?: number | string;\n        baseFrequency?: number | string;\n        baselineShift?: number | string;\n        baseProfile?: number | string;\n        bbox?: number | string;\n        begin?: number | string;\n        bias?: number | string;\n        by?: number | string;\n        calcMode?: number | string;\n        capHeight?: number | string;\n        clip?: number | string;\n        clipPath?: string;\n        clipPathUnits?: number | string;\n        clipRule?: number | string;\n        colorInterpolation?: number | string;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\";\n        colorProfile?: number | string;\n        colorRendering?: number | string;\n        contentScriptType?: number | string;\n        contentStyleType?: number | string;\n        cursor?: number | string;\n        cx?: number | string;\n        cy?: number | string;\n        d?: string;\n        decelerate?: number | string;\n        descent?: number | string;\n        diffuseConstant?: number | string;\n        direction?: number | string;\n        display?: number | string;\n        divisor?: number | string;\n        dominantBaseline?: number | string;\n        dur?: number | string;\n        dx?: number | string;\n        dy?: number | string;\n        edgeMode?: number | string;\n        elevation?: number | string;\n        enableBackground?: number | string;\n        end?: number | string;\n        exponent?: number | string;\n        externalResourcesRequired?: Booleanish;\n        fill?: string;\n        fillOpacity?: number | string;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\";\n        filter?: string;\n        filterRes?: number | string;\n        filterUnits?: number | string;\n        floodColor?: number | string;\n        floodOpacity?: number | string;\n        focusable?: Booleanish | \"auto\";\n        fontFamily?: string;\n        fontSize?: number | string;\n        fontSizeAdjust?: number | string;\n        fontStretch?: number | string;\n        fontStyle?: number | string;\n        fontVariant?: number | string;\n        fontWeight?: number | string;\n        format?: number | string;\n        from?: number | string;\n        fx?: number | string;\n        fy?: number | string;\n        g1?: number | string;\n        g2?: number | string;\n        glyphName?: number | string;\n        glyphOrientationHorizontal?: number | string;\n        glyphOrientationVertical?: number | string;\n        glyphRef?: number | string;\n        gradientTransform?: string;\n        gradientUnits?: string;\n        hanging?: number | string;\n        horizAdvX?: number | string;\n        horizOriginX?: number | string;\n        href?: string;\n        ideographic?: number | string;\n        imageRendering?: number | string;\n        in2?: number | string;\n        in?: string;\n        intercept?: number | string;\n        k1?: number | string;\n        k2?: number | string;\n        k3?: number | string;\n        k4?: number | string;\n        k?: number | string;\n        kernelMatrix?: number | string;\n        kernelUnitLength?: number | string;\n        kerning?: number | string;\n        keyPoints?: number | string;\n        keySplines?: number | string;\n        keyTimes?: number | string;\n        lengthAdjust?: number | string;\n        letterSpacing?: number | string;\n        lightingColor?: number | string;\n        limitingConeAngle?: number | string;\n        local?: number | string;\n        markerEnd?: string;\n        markerHeight?: number | string;\n        markerMid?: string;\n        markerStart?: string;\n        markerUnits?: number | string;\n        markerWidth?: number | string;\n        mask?: string;\n        maskContentUnits?: number | string;\n        maskUnits?: number | string;\n        mathematical?: number | string;\n        mode?: number | string;\n        numOctaves?: number | string;\n        offset?: number | string;\n        opacity?: number | string;\n        operator?: number | string;\n        order?: number | string;\n        orient?: number | string;\n        orientation?: number | string;\n        origin?: number | string;\n        overflow?: number | string;\n        overlinePosition?: number | string;\n        overlineThickness?: number | string;\n        paintOrder?: number | string;\n        panose1?: number | string;\n        path?: string;\n        pathLength?: number | string;\n        patternContentUnits?: string;\n        patternTransform?: number | string;\n        patternUnits?: string;\n        pointerEvents?: number | string;\n        points?: string;\n        pointsAtX?: number | string;\n        pointsAtY?: number | string;\n        pointsAtZ?: number | string;\n        preserveAlpha?: Booleanish;\n        preserveAspectRatio?: string;\n        primitiveUnits?: number | string;\n        r?: number | string;\n        radius?: number | string;\n        refX?: number | string;\n        refY?: number | string;\n        renderingIntent?: number | string;\n        repeatCount?: number | string;\n        repeatDur?: number | string;\n        requiredExtensions?: number | string;\n        requiredFeatures?: number | string;\n        restart?: number | string;\n        result?: string;\n        rotate?: number | string;\n        rx?: number | string;\n        ry?: number | string;\n        scale?: number | string;\n        seed?: number | string;\n        shapeRendering?: number | string;\n        slope?: number | string;\n        spacing?: number | string;\n        specularConstant?: number | string;\n        specularExponent?: number | string;\n        speed?: number | string;\n        spreadMethod?: string;\n        startOffset?: number | string;\n        stdDeviation?: number | string;\n        stemh?: number | string;\n        stemv?: number | string;\n        stitchTiles?: number | string;\n        stopColor?: string;\n        stopOpacity?: number | string;\n        strikethroughPosition?: number | string;\n        strikethroughThickness?: number | string;\n        string?: number | string;\n        stroke?: string;\n        strokeDasharray?: string | number;\n        strokeDashoffset?: string | number;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\";\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\";\n        strokeMiterlimit?: number | string;\n        strokeOpacity?: number | string;\n        strokeWidth?: number | string;\n        surfaceScale?: number | string;\n        systemLanguage?: number | string;\n        tableValues?: number | string;\n        targetX?: number | string;\n        targetY?: number | string;\n        textAnchor?: string;\n        textDecoration?: number | string;\n        textLength?: number | string;\n        textRendering?: number | string;\n        to?: number | string;\n        transform?: string;\n        u1?: number | string;\n        u2?: number | string;\n        underlinePosition?: number | string;\n        underlineThickness?: number | string;\n        unicode?: number | string;\n        unicodeBidi?: number | string;\n        unicodeRange?: number | string;\n        unitsPerEm?: number | string;\n        vAlphabetic?: number | string;\n        values?: string;\n        vectorEffect?: number | string;\n        version?: string;\n        vertAdvY?: number | string;\n        vertOriginX?: number | string;\n        vertOriginY?: number | string;\n        vHanging?: number | string;\n        vIdeographic?: number | string;\n        viewBox?: string;\n        viewTarget?: number | string;\n        visibility?: number | string;\n        vMathematical?: number | string;\n        widths?: number | string;\n        wordSpacing?: number | string;\n        writingMode?: number | string;\n        x1?: number | string;\n        x2?: number | string;\n        x?: number | string;\n        xChannelSelector?: string;\n        xHeight?: number | string;\n        xlinkActuate?: string;\n        xlinkArcrole?: string;\n        xlinkHref?: string;\n        xlinkRole?: string;\n        xlinkShow?: string;\n        xlinkTitle?: string;\n        xlinkType?: string;\n        xmlBase?: string;\n        xmlLang?: string;\n        xmlns?: string;\n        xmlnsXlink?: string;\n        xmlSpace?: string;\n        y1?: number | string;\n        y2?: number | string;\n        y?: number | string;\n        yChannelSelector?: string;\n        z?: number | string;\n        zoomAndPan?: string;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean;\n        allowpopups?: boolean;\n        autoFocus?: boolean;\n        autosize?: boolean;\n        blinkfeatures?: string;\n        disableblinkfeatures?: string;\n        disableguestresize?: boolean;\n        disablewebsecurity?: boolean;\n        guestinstance?: string;\n        httpreferrer?: string;\n        nodeintegration?: boolean;\n        partition?: string;\n        plugins?: boolean;\n        preload?: string;\n        src?: string;\n        useragent?: string;\n        webpreferences?: string;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLElement>, HTMLElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG { }\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : undefined extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    interface ReactChildren {\n        map<T, C>(children: C | C[], fn: (child: C, index: number) => T):\n            C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack: string;\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T :\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n            string extends keyof P ? P :\n                // Prefer declared types which are not exactly any\n                & Pick<P, NotExactlyAnyPropertyKeys<P>>\n                // For props which are exactly any, use the type inferred from propTypes if present\n                & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n                // Keep leftover props not specified in propTypes\n                & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n    ? string extends keyof P ? P :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & Partial<Pick<P, Extract<keyof P, keyof D>>>\n        & Partial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T; }\n        ? MergePropTypes<P, PropTypes.InferProps<T>>\n        : C extends { defaultProps: infer D; }\n            ? Defaultize<P, D>\n            : P;\n\ndeclare global {\n    namespace JSX {\n        interface Element extends React.ReactElement<any, any> { }\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty { props: {}; }\n        interface ElementChildrenAttribute { children: {}; }\n\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n                : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends React.Attributes { }\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLElement>, HTMLElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLElement>, HTMLElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLElement>, HTMLElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLElement>, HTMLElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLElement>, HTMLElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLElement>, HTMLElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGProps<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGProps<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n\n"," }"),"file:///node_modules/react/index.d.ts"),t.languages.typescript.typescriptDefaults.addExtraLib("declare module 'easybase-react' { ".concat('\n\n// Generated by dts-bundle-generator v5.9.0\n\ntype Expression = string | SQ;\ntype Value = {\n\t[column: string]: any;\n};\ntype Row = {\n\t[column: string]: any;\n};\ntype Conditions = (SQ | {\n\t[field: string]: SQ | any;\n})[];\ninterface With {\n\t/**\n\t * **WITH clause** - table arguments\n\t *\n\t * Constructs a Common Table Expression (CTE)\n\t *\n\t * A table is an object where each key is an alias and each value may be:\n\t *   * a subquery\n\t *   * an array of data values\n\t *\n\t * @example\n\t */\n\twith(...tables: {\n\t\t[table: string]: SQ | Value[];\n\t}[]): this;\n\t/**\n\t * **WITH RECURSIVE** - recursive CTE\n\t *\n\t * Makes the Common Table Expression recursive.\n\t *\n\t */\n\twithRecursive(...tables: {\n\t\t[table: string]: SQ | Value[];\n\t}[]): this;\n}\ninterface Execute extends Promise<Row[]> {\n\t/**\n\t * In a Select query, executes the query and returns a Promise for an array of rows.\n\t *\n\t * Insert, Delete, and Update queries return a Promise for an array of numbers rather than a Record<string, any>[].\n\t *\n\t */\n\tall(trx?: Transaction): Promise<Record<string, any>[] | number[]>;\n\t/**\n\t * In a Select query, executes the query and returns a Promise for the first row.\n\t *\n\t * Insert, Delete, and Update queries return a Promise for a number rather than a Record<string, any>.\n\t */\n\tone(trx?: Transaction): Promise<Record<string, any> | number>;\n}\ninterface Return {\n\t/**\n\t * **SELECT or RETURNING clause** - https://easybase.github.io/EasyQB/docs/select_queries.html#select\n\t *\n\t * A field may be:\n\t * * an expression\n\t * * a non-string argument to parameterize\n\t * * an object where each key is an alias and each value is:\n\t *   * an expression\n\t *   * a non-string argument to parameterize\n\t *\n\t * An expression may be a string or subquery.\n\t *\n\t */\n\treturn(...fields: (Expression | any | {\n\t\t[alias: string]: Expression | any;\n\t})[]): this;\n}\ninterface ExpressReturn {\n\t/**\n\t *\n\t * A field may be:\n\t * * an expression\n\t * * a non-string argument to parameterize\n\t * * an object where each key is an alias and each value is:\n\t *   * an expression\n\t *   * a non-string argument to parameterize\n\t *\n\t * An expression may be a string or subquery.\n\t *\n\t * **To prevent SQL injection, never source string fields from user input**\n\t *\n\t */\n\t(...fields: (Expression | any | {\n\t\t[alias: string]: Expression | any;\n\t})[]): SQ;\n}\ninterface Where {\n\t/**\n\t * **WHERE clause** - query filters\n\t *\n\t * A condition may be:\n\t * * a manual subquery\n\t * * an object such that each value is\n\t *   * a manual subquery and its key is ignored\n\t *   * or checked for equality against its key\n\t *\n\t * Multiple conditions are joined with _" or "_.\n\t *\n\t * Properties within an object are joined with _" and "_.\n\t *\n\t */\n\twhere(...conditions: Conditions): this;\n}\ninterface ExpressWhere {\n\t/**\n\t *\n\t * A condition may be:\n\t * * a manual subquery\n\t * * an object such that each value is\n\t *   * a manual subquery and its key is ignored\n\t *   * or checked for equality against its key\n\t *\n\t * Multiple conditions are joined with _" or "_.\n\t *\n\t * Properties within an object are joined with _" and "_.\n\t *\n\t */\n\t(...conditions: Conditions): SQR;\n}\ninterface Logic extends And, Or {\n}\ninterface And {\n\t/**\n\t * **AND condition** - https://easybase.github.io/EasyQB/docs/operations.html#and\n\t */\n\tand(...conditions: Conditions): this;\n}\ninterface Or {\n\t/**\n\t * **OR condition** - https://easybase.github.io/EasyQB/docs/operations.html#or\n\t */\n\tor(...conditions: Conditions): this;\n}\ninterface Distinct {\n\t/**\n\t * **SELECT DISTINCT**\n\t *\n\t * Filters the query results so only distinct rows are returned. Duplicate result rows are eliminated.\n\t */\n\tdistinct: this;\n\t/**\n\t * **SELECT DISTINCT ON** - columns\n\t *\n\t * Filters query results on a subset of columns.\n\t *\n\t * If multiple rows share values for the distinct columns, only the first is returned. An order by clause is needed to make the result set deterministic.\n\t *\n\t * Columns may be strings or subqueries.\n\t *\n\t */\n\tdistinctOn(...columns: (string | SQ)[]): this;\n\t/**\n\t * **SELECT DISTINCT ON** - template string\n\t *\n\t * Filters query results on a subset of columns.\n\t *\n\t * If multiple rows share values for the distinct columns, only the first is returned. An order by clause is needed to make the result set deterministic.\n\t *\n\t */\n\tdistinctOn(...columns: (string | SQ)[]): this;\n}\ninterface GroupItems extends Array<Expression | RollupItem | CubeItem | GroupingSetsItem | GroupItems> {\n}\ninterface ExpressionItems extends Array<Expression | ExpressionItems> {\n}\ninterface RollupItem {\n\ttype: "rollup";\n\targs: ExpressionItems;\n}\ninterface CubeItem {\n\ttype: "cube";\n\targs: ExpressionItems;\n}\ninterface GroupingSetsItem {\n\ttype: "grouping sets";\n\targs: GroupItems;\n}\ninterface GroupHelpers {\n\t/**\n\t * **[ROLLUP item](https://www.postgresql.org/docs/current/queries-table-expressions.html#QUERIES-GROUPING-SETS)** - creates rollup grouping sets for use in a group by clause\n\t *\n\t * is equivalent to\n\t *\n\t */\n\trollup(...args: ExpressionItems): RollupItem;\n\t/**\n\t * **[CUBE item](https://www.postgresql.org/docs/current/queries-table-expressions.html#QUERIES-GROUPING-SETS)** - creates cube grouping sets for use in a group by clause\n\t */\n\tcube(...args: ExpressionItems): CubeItem;\n\t/**\n   * **[Grouping Sets item](https://www.postgresql.org/docs/current/queries-table-expressions.html#QUERIES-GROUPING-SETS)** - creates grouping sets for use in a group by clause\n   *\n   */\n\tgroupingSets(...args: GroupItems): GroupingSetsItem;\n}\ninterface GroupBy {\n\t/**\n\t * **GROUP BY clause** - https://easybase.github.io/EasyQB/docs/select_queries.html#group-by\n\t * An expression may be a string or subquery.\n\t */\n\tgroupBy(...args: GroupItems): this;\n}\ninterface Having {\n\t/**\n\t * **HAVING clause** - group conditions\n\t *\n\t * A condition may be:\n\t * * a manual subquery\n\t * * an object such that each value is\n\t *   * a manual subquery and its key is ignored\n\t *   * or checked for equality against its key\n\t *\n\t * @example\n\t */\n\thaving(...conditions: Conditions): this;\n}\ninterface OrderBy {\n\t/**\n\t * **ORDER BY clause** - https://easybase.github.io/EasyQB/docs/select_queries.html#order-by\n\t *\n\t */\n\torderBy(...orderItems: (Expression | {\n\t\tby: Expression;\n\t\tsort?: "asc" | "desc";\n\t\tusing?: string;\n\t\tnulls?: "first" | "last";\n\t})[]): this;\n}\ninterface Limit {\n\t/**\n\t * **LIMIT clause** - https://easybase.github.io/EasyQB/docs/select_queries.html#limit\n\t *\n\t * Specify the maximum number of results to return\n\t *\n\t */\n\tlimit(limit: number): this;\n}\ninterface Offset {\n\t/**\n\t * **OFFSET clause** - https://easybase.github.io/EasyQB/docs/select_queries.html#offset\n\t *\n\t * Specify the number of results to skip before returning\n\t */\n\toffset(offset: number): this;\n}\ninterface Joiner<T> {\n\t/**\n\t * **JOIN clause** - table arguments\n\t */\n\tjoin(...tables: (Expression | {\n\t\t[alias: string]: Expression | Value[];\n\t})[]): T;\n}\ninterface Join {\n\t/**\n\t * **JOIN clause** - table arguments\n\t *\n\t * Creates a join table.\n\t */\n\tjoin(...tables: (Expression | {\n\t\t[alias: string]: Expression | Value[];\n\t})[]): this;\n\t/**\n\t * **INNER JOIN** - (inner) join\n\t *\n\t * Sets the join type to inner. This method is not usually needed because joins are inner by default.\n\t *\n\t */\n\tinner: Joiner<this>;\n\t/**\n\t * **LEFT JOIN** - left (outer) join\n\t *\n\t * Sets the join type to left\n\t */\n\tleft: Joiner<this>;\n\t/**\n\t * **RIGHT JOIN** - right (outer) join\n\t *\n\t * Sets the join type to right\n\t *\n\t */\n\tright: Joiner<this>;\n\t/**\n\t * **FULL JOIN** - full (outer) join\n\t *\n\t * Sets the join type to full\n\t *\n\t */\n\tfull: Joiner<this>;\n\t/**\n\t * **CROSS JOIN** - cross join\n\t *\n\t * Sets the join type to cross\n\t *\n\t */\n\tcross: Joiner<this>;\n\t/**\n\t * **JOIN CONDITION** - join conditions\n\t *\n\t * Specifies join conditions for the previous join.\n\t *\n\t * A condition may be:\n\t * * a manual subquery\n\t * * an object such that each value is\n\t *   * a manual subquery and its key is ignored\n\t *   * or checked for equality against its key\n\t *\n\t * Multiple conditions are joined with _" or "_.\n\t *\n\t * Properties within an object are joined with _" and "_.\n\t *\n\t */\n\ton(...conditions: Conditions): this;\n\t/**\n\t * **JOIN USING** - column names\n\t *\n\t * Specifies the shared column for the previous join\n\t *\n\t */\n\tusing(...columns: string[]): this;\n}\ninterface SetOperators {\n\t/**\n\t * **UNION Clause** - union queries\n\t *\n\t * Union is a set operator, so duplicate result rows are eliminated.\n\t */\n\tunion(...queries: SQ[]): this;\n\t/**\n\t * **UNION ALL Clause** - unionAll queries\n\t *\n\t */\n\tunionAll(...queries: SQ[]): this;\n\t/**\n\t * **INTERSECT Clause** - intersect queries\n\t *\n\t * intersect is a set operator, so duplicate result rows are eliminated.\n\t */\n\tintersect(...queries: SQ[]): this;\n\t/**\n\t * **INTERSECT ALL Clause** - intersectAll queries\n\t *\n\t */\n\tintersectAll(...queries: SQ[]): this;\n\t/**\n\t * **EXCEPT Clause** - except queries\n\t *\n\t * except is a set operator, so duplicate result rows are eliminated.\n\t */\n\texcept(...queries: SQ[]): this;\n\t/**\n\t * **EXCEPT ALL Clause** - exceptAll queries\n\t *\n\t */\n\texceptAll(...queries: SQ[]): this;\n}\ninterface Insert {\n\t/**\n\t * **INSERT clause** - https://easybase.github.io/EasyQB/docs/insert_queries.html\n\t *\n\t * Specifies the data to insert as objects.\n\t *\n\t * Column names are inferred from object keys.\n\t *\n\t * Values may be subqueries\n\t */\n\tinsert(...values: Value[]): this;\n\t/**\n\t * **INSERT clause** - https://easybase.github.io/EasyQB/docs/insert_queries.html\n\t *\n\t * Specifies the data to insert as objects.\n\t *\n\t * Column names are inferred from object keys.\n\t *\n\t * Values may be subqueries\n\t *\n\t */\n\tinsert(values: Value[]): this;\n\t/**\n\t * **INSERT clause** - https://easybase.github.io/EasyQB/docs/insert_queries.html\n\t *\n\t * Specifies the data to insert as objects.\n\t *\n\t * Column names are inferred from object keys.\n\t *\n\t * Values may be subqueries\n\t *\n\t */\n\tinsert(query: SQ): this;\n}\ninterface Set {\n\t/**\n\t * **SET clause** - https://easybase.github.io/EasyQB/docs/update_queries.html#set\n\t */\n\tset(...values: Value[]): this;\n}\ninterface Delete {\n\t/**\n\t * DELETE - marks the query as a delete query - https://easybase.github.io/EasyQB/docs/delete_queries.html\n\t *\n\t * @example\n\t * await table.delete().one();\n\t * // > 1\n\t *\n\t * await table.delete().where(e.gt(\'rating\', 55)).all();\n\t * // > 3\n\t *\n\t * await table.delete().where({ _key: res[0]._key }).one();\n\t * // > 1\n\t */\n\treadonly delete: this;\n}\ninterface End {\n\t/**\n\t * Closes the database connection.\n\t *\n\t * Subsequent attempts to execute using the query builder will fail.\n\t */\n\tend(): Promise<void>;\n}\ninterface Transaction {\n\t/**\n\t * Commits the transaction\n\t */\n\tcommit(): Promise<void>;\n\t/**\n\t * Rolls back the transaction\n\t */\n\trollback(): Promise<void>;\n}\ninterface TransactionMethods {\n\t/**\n\t * Creates a transaction\n\t *\n\t * Pass an asynchronous callback containing queries that should be executed\n\t * the transaction is rolled back. Otherwise, the transaction is committed,\n\t * and the value returned by the callback is returned.\n\t *\n\t * the transaction, or queries will not be part of the transaction.\n\t */\n\ttransaction<T>(callback: (trx: Transaction) => Promise<T>): Promise<T>;\n\t/**\n\t * Creates a transaction\n\t *\n\t * This overload is less convenient but more flexible than the callback\n\t * transaction method.\n\t *\n\t */\n\ttransaction(): Promise<Transaction>;\n}\ninterface ExpressionBuilder {\n\te: NewExpression;\n}\ntype TypeExpressionMap = {\n\tnew: NewExpression;\n\tunknown: UnknownExpression;\n\tboolean: BooleanExpression;\n\tnumber: NumberExpression;\n\tstring: StringExpression;\n\tarray: ArrayExpression;\n\tjson: JSONExpression;\n\trow: RowExpression;\n\ttable: TableExpression;\n};\ntype TypePrimitiveMap = {\n\tnew: never;\n\tunknown: null;\n\tboolean: boolean;\n\tnumber: number;\n\tstring: string;\n\tarray: any[];\n\tjson: null | number | boolean | string | any[] | {\n\t\t[key: string]: any;\n\t};\n\trow: never;\n\ttable: never;\n};\ntype TypeInferenceMap = {\n\t[key in Types]: TypeExpressionMap[key] | TypePrimitiveMap[key];\n};\ntype InferOrUnknown<T extends Types> = null | UnknownExpression | TypeInferenceMap[T];\ntype TypeCompatibilityMap = {\n\tnew: never;\n\tunknown: Arg;\n\tboolean: InferOrUnknown<"boolean">;\n\tnumber: InferOrUnknown<"number">;\n\tstring: InferOrUnknown<"string">;\n\tarray: InferOrUnknown<"array">;\n\tjson: InferOrUnknown<"json">;\n\trow: InferOrUnknown<"row">;\n\ttable: TypeInferenceMap["table"];\n};\ntype Types = keyof TypeExpressionMap;\ntype PrimitiveTypes = TypePrimitiveMap[Types];\ntype ArgTypes = Exclude<Types, "new">;\ntype Arg = TypeExpressionMap[ArgTypes] | PrimitiveTypes;\ntype Compatible<T extends Types> = TypeCompatibilityMap[T];\ntype CompatibleArray<T extends Types> = Compatible<T>[] | null | UnknownExpression | ArrayExpression;\ntype Infer<T extends Arg> = T extends TypeInferenceMap["new"] ? "new" : T extends TypeInferenceMap["unknown"] ? "unknown" : T extends TypeInferenceMap["boolean"] ? "boolean" : T extends TypeInferenceMap["number"] ? "number" : T extends TypeInferenceMap["string"] ? "string" : T extends TypeInferenceMap["array"] ? "array" : T extends TypeInferenceMap["row"] ? "row" : T extends TypeInferenceMap["table"] ? "table" : T extends TypeInferenceMap["json"] ? "json" : never;\ntype InferCompatible<T extends Arg> = Compatible<Infer<T>>;\ntype UnknownArgument = TypeCompatibilityMap["unknown"];\ntype BooleanArgument = TypeCompatibilityMap["boolean"];\ntype NumberArgument = TypeCompatibilityMap["number"];\ntype StringArgument = TypeCompatibilityMap["string"];\ntype ArrayArgument = TypeCompatibilityMap["array"];\ntype RowArgument = TypeCompatibilityMap["row"];\ntype TableArgument = TypeCompatibilityMap["table"];\ntype JSONArgument = TypeCompatibilityMap["json"];\ntype CompatibleTypes<T extends Types> = T | "new" | "unknown";\ntype BooleanTypes = CompatibleTypes<"boolean">;\ntype NumberTypes = CompatibleTypes<"number">;\ntype StringTypes = CompatibleTypes<"string">;\ntype ArrayTypes = CompatibleTypes<"array">;\ntype RowTypes = CompatibleTypes<"row">;\ntype TableTypes = CompatibleTypes<"table">;\ntype JSONTypes = CompatibleTypes<"json">;\ninterface Expression<T extends Types> extends ComparisonOperations<T> {\n\ttype: T;\n\t_build(): string;\n}\ninterface AllOperations<T extends "new" | "unknown"> extends ValueOperations<T>, ArgOperations, LogicalOperations<T>, MathOperations<T>, StringOperations<T>, ArrayOperations<T>, RowOperations<T>, TableOperations<T>, Aggregators {\n}\ninterface NewExpression extends Expression<"new">, AllOperations<"new">, ComparisonOperations<T> {\n}\ninterface UnknownExpression extends Expression<"unknown">, AllOperations<"unknown"> {\n}\ninterface BooleanExpression extends Expression<"boolean">, LogicalOperations<"boolean"> {\n}\ninterface NumberExpression extends Expression<"number">, MathOperations<"number"> {\n}\ninterface StringExpression extends Expression<"string">, StringOperations<"string"> {\n}\ninterface ArrayExpression extends Expression<"array">, ArrayOperations<"array"> {\n}\ninterface RowExpression extends Expression<"row"> {\n}\ninterface TableExpression extends Expression<"table">, TableOperations<"table">, ValueOperations<"table"> {\n}\ninterface JSONExpression extends Expression<"json">, JSONOperations<"json"> {\n}\ninterface ArgOperations {\n\t(strings: TemplateStringsArray, ...args: any[]): UnknownExpression;\n\t<T extends Arg>(arg: T): TypeArgChainMap[Infer<T>];\n\t(...arg: Arg[]): RowExpression;\n}\ntype TypeArgChainMap = {\n\tunknown: ArgUnknownChain;\n\tboolean: ArgBooleanChain;\n\tnumber: ArgNumberChain;\n\tstring: ArgStringChain;\n\tarray: ArgArrayChain;\n\tjson: ArgJSONChain;\n\trow: ArgRowChain;\n\ttable: ArgTableChain;\n};\ninterface ArgChain {\n\t(strings: TemplateStringsArray, ...args: any[]): RowExpression;\n\t(...arg: Arg[]): RowExpression;\n}\ninterface ArgUnknownChain extends ArgChain, UnknownExpression {\n}\ninterface ArgBooleanChain extends ArgChain, BooleanExpression {\n}\ninterface ArgNumberChain extends ArgChain, NumberExpression {\n}\ninterface ArgStringChain extends ArgChain, StringExpression {\n}\ninterface ArgArrayChain extends ArgChain, ArrayExpression {\n}\ninterface ArgJSONChain extends ArgChain, JSONExpression {\n}\ninterface ArgRowChain extends ArgChain, RowExpression {\n}\ninterface ArgTableChain extends ArgChain, TableExpression {\n}\ninterface ValueOperations<T extends Types> {\n\tunknown: T extends "new" ? UnknownChain : UnknownExpression;\n\tboolean: T extends "new" ? BooleanChain : BooleanExpression;\n\tnumber: T extends "new" ? NumberChain : NumberExpression;\n\tstring: T extends "new" ? StringChain : StringExpression;\n\tarray: T extends "new" ? ArrayChain : ArrayExpression;\n\tjson: T extends "new" ? JSONChain : JSONExpression;\n\trow: T extends "new" ? RowChain : RowExpression;\n\ttable: T extends "new" ? TableChain : TableExpression;\n}\ninterface UnknownChain {\n\t(strings: TemplateStringsArray, ...args: any[]): UnknownExpression;\n\t(unknown: UnknownArgument): UnknownExpression;\n}\ninterface BooleanChain {\n\t(strings: TemplateStringsArray, ...args: any[]): BooleanExpression;\n\t(boolean: BooleanArgument): BooleanExpression;\n}\ninterface NumberChain {\n\t(strings: TemplateStringsArray, ...args: any[]): NumberExpression;\n\t(number: NumberArgument): NumberExpression;\n}\ninterface StringChain {\n\t(strings: TemplateStringsArray, ...args: any[]): StringExpression;\n\t(string: StringArgument): StringExpression;\n}\ninterface ArrayChain {\n\t(strings: TemplateStringsArray, ...args: any[]): ArrayExpression;\n\t(array: ArrayArgument): ArrayExpression;\n}\ninterface JSONChain {\n\t(strings: TemplateStringsArray, ...args: any[]): JSONExpression;\n\t(json: JSONArgument): JSONExpression;\n}\ninterface RowChain {\n\t(strings: TemplateStringsArray, ...args: any[]): RowExpression;\n\t(row: RowArgument): RowExpression;\n\t(...arg: Arg[]): RowExpression;\n}\ninterface TableChain {\n\t(strings: TemplateStringsArray, ...args: any[]): TableExpression;\n\t(table: TableArgument): TableExpression;\n}\ninterface LogicalOperations<T extends BooleanTypes> {\n\t// logical\n\tand: T extends "new" ? And : AndChain;\n\tor: T extends "new" ? Or : OrChain;\n\tnot: T extends "new" ? Not : BooleanExpression;\n\t// comparison\n\tisTrue: T extends "new" ? IsTrue : BooleanExpression;\n\tisNotTrue: T extends "new" ? IsNotTrue : BooleanExpression;\n\tisFalse: T extends "new" ? IsFalse : BooleanExpression;\n\tisNotFalse: T extends "new" ? IsNotFalse : BooleanExpression;\n\tisUnknown: T extends "new" ? IsUnknown : BooleanExpression;\n\tisNotUnknown: T extends "new" ? IsNotUnknown : BooleanExpression;\n}\ninterface And {\n\t(...args: BooleanArgument[]): AndChain;\n}\ninterface AndChain extends And, BooleanExpression {\n}\ninterface Or {\n\t(...args: BooleanArgument[]): OrChain;\n}\ninterface OrChain extends Or, BooleanExpression {\n}\ninterface Not {\n\t(arg: BooleanArgument): BooleanExpression;\n}\ninterface IsTrue {\n\t(arg1: Arg): BooleanExpression;\n}\ninterface IsNotTrue {\n\t(arg1: Arg): BooleanExpression;\n}\ninterface IsFalse {\n\t(arg1: Arg): BooleanExpression;\n}\ninterface IsNotFalse {\n\t(arg1: Arg): BooleanExpression;\n}\ninterface IsUnknown {\n\t(arg1: BooleanArgument): BooleanExpression;\n}\ninterface IsNotUnknown {\n\t(arg1: BooleanArgument): BooleanExpression;\n}\ninterface ComparisonOperations<T extends Types> {\n\t// binary comparison\n\teq: T extends "new" ? Eq : EqChain<T>;\n\tneq: T extends "new" ? Neq : NeqChain<T>;\n\tlt: T extends "new" ? Lt : LtChain<T>;\n\tgt: T extends "new" ? Gt : GtChain<T>;\n\tlte: T extends "new" ? Lte : LteChain<T>;\n\tgte: T extends "new" ? Gte : GteChain<T>;\n\t// misc\n\tbetween: T extends "new" ? Between : BetweenChain1<T>;\n\tisDistinctFrom: T extends "new" ? IsDistinctFrom : IsDistinctFromChain<T>;\n\tisNotDistinctFrom: T extends "new" ? IsNotDistinctFrom : IsNotDistinctFromChain<T>;\n\tisNull: T extends "new" ? IsNull : BooleanExpression;\n\tisNotNull: T extends "new" ? IsNotNull : BooleanExpression;\n\tin: T extends "new" ? In : InChain<T>;\n\tnotIn: T extends "new" ? NotIn : NotInChain<T>;\n\t// quantified any\n\teqAny: T extends "new" ? EqAny : EqAnyChain<T>;\n\tneqAny: T extends "new" ? NeqAny : NeqAnyChain<T>;\n\tltAny: T extends "new" ? LtAny : LtAnyChain<T>;\n\tgtAny: T extends "new" ? GtAny : GtAnyChain<T>;\n\tlteAny: T extends "new" ? LteAny : LteAnyChain<T>;\n\tgteAny: T extends "new" ? GteAny : GteAnyChain<T>;\n\t// quantified all\n\teqAll: T extends "new" ? EqAll : EqAllChain<T>;\n\tneqAll: T extends "new" ? NeqAll : NeqAllChain<T>;\n\tltAll: T extends "new" ? LtAll : LtAllChain<T>;\n\tgtAll: T extends "new" ? GtAll : GtAllChain<T>;\n\tlteAll: T extends "new" ? LteAll : LteAllChain<T>;\n\tgteAll: T extends "new" ? GteAll : GteAllChain<T>;\n\t// date comparison\n\t// dateEq: T extends \'new\' ? Eq : EqChain<T>\n\t// dateNeq: T extends \'new\' ? Neq : NeqChain<T>\n\tdateLt: T extends "new" ? DateLt : LtChain<T>;\n\tdateGt: T extends "new" ? DateGt : GtChain<T>;\n\tdateLte: T extends "new" ? DateLte : LteChain<T>;\n\tdateGte: T extends "new" ? DateGte : GteChain<T>;\n}\ninterface DateLt {\n\t<T extends Arg>(arg1: T): LtChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: Date | string | InferCompatible<T>): BooleanExpression;\n}\ninterface DateGt {\n\t<T extends Arg>(arg1: T): GtChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: Date | string | InferCompatible<T>): BooleanExpression;\n}\ninterface DateLte {\n\t<T extends Arg>(arg1: T): LteChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: Date | string | InferCompatible<T>): BooleanExpression;\n}\ninterface DateGte {\n\t<T extends Arg>(arg1: T): GteChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: Date | string | InferCompatible<T>): BooleanExpression;\n}\ninterface Eq {\n\t<T extends Arg>(arg1: T): EqChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number | string | InferCompatible<T>): BooleanExpression;\n}\ninterface EqChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface Neq {\n\t<T extends Arg>(arg1: T): NeqChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number | string | InferCompatible<T>): BooleanExpression;\n}\ninterface NeqChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface Lt {\n\t<T extends Arg>(arg1: T): LtChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number | string | InferCompatible<T>): BooleanExpression;\n}\ninterface LtChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface Gt {\n\t<T extends Arg>(arg1: T): GtChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number | string | InferCompatible<T>): BooleanExpression;\n}\ninterface GtChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface Lte {\n\t<T extends Arg>(arg1: T): LteChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number | string | InferCompatible<T>): BooleanExpression;\n}\ninterface LteChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface Gte {\n\t<T extends Arg>(arg1: T): GteChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number | string | InferCompatible<T>): BooleanExpression;\n}\ninterface GteChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface Between {\n\t<T extends Arg>(arg1: T): BetweenChain1<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: InferCompatible<T>): BetweenChain2<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number | string | InferCompatible<T>, arg3: number | string | InferCompatible<T>): BooleanExpression;\n}\ninterface BetweenChain1<T extends Types> {\n\t(arg2: Compatible<T>): BetweenChain2<T>;\n\t(arg2: Compatible<T>, arg3: number | string | Compatible<T>): BooleanExpression;\n}\ninterface BetweenChain2<T extends Types> {\n\t(arg3: Compatible<T>): BooleanExpression;\n}\ninterface IsDistinctFrom {\n\t<T extends Arg>(arg1: T): IsDistinctFromChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: InferCompatible<T>): BooleanExpression;\n}\ninterface IsDistinctFromChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface IsNotDistinctFrom {\n\t<T extends Arg>(arg1: T): IsNotDistinctFromChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: InferCompatible<T>): BooleanExpression;\n}\ninterface IsNotDistinctFromChain<T extends Types> {\n\t(arg2: Compatible<T>): BooleanExpression;\n}\ninterface IsNull {\n\t(arg1: Arg): BooleanExpression;\n}\ninterface IsNotNull {\n\t(arg1: Arg): BooleanExpression;\n}\ninterface EqAny {\n\t<T extends Arg>(arg1: T): EqAnyChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface EqAnyChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface NeqAny {\n\t<T extends Arg>(arg1: T): NeqAnyChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface NeqAnyChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface LtAny {\n\t<T extends Arg>(arg1: T): LtAnyChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface LtAnyChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface GtAny {\n\t<T extends Arg>(arg1: T): GtAnyChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface GtAnyChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface LteAny {\n\t<T extends Arg>(arg1: T): LteAnyChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface LteAnyChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface GteAny {\n\t<T extends Arg>(arg1: T): GteAnyChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface GteAnyChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface EqAll {\n\t<T extends Arg>(arg1: T): EqAllChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface EqAllChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface NeqAll {\n\t<T extends Arg>(arg1: T): NeqAllChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface NeqAllChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface LtAll {\n\t<T extends Arg>(arg1: T): LtAllChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface LtAllChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface GtAll {\n\t<T extends Arg>(arg1: T): GtAllChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface GtAllChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface LteAll {\n\t<T extends Arg>(arg1: T): LteAllChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface LteAllChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface GteAll {\n\t<T extends Arg>(arg1: T): GteAllChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | CompatibleArray<Infer<T>>): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface GteAllChain<T extends Types> {\n\t(arg2: CompatibleArray<T>): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface In {\n\t<T extends Arg>(arg1: T): InChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | InferCompatible<T>[]): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface InChain<T extends Types> {\n\t(arg2: Compatible<T>[]): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface NotIn {\n\t<T extends Arg>(arg1: T): NotInChain<Infer<T>>;\n\t<T extends Arg>(arg1: T, arg2: number[] | string[] | InferCompatible<T>[]): BooleanExpression;\n\t<T extends Arg>(arg1: T, arg2: TableArgument): BooleanExpression;\n}\ninterface NotInChain<T extends Types> {\n\t(arg2: Compatible<T>[]): BooleanExpression;\n\t(arg2: TableArgument): BooleanExpression;\n}\ninterface MathOperations<T extends NumberTypes> {\n\tadd: T extends "new" ? Add : AddChain;\n\tsub: T extends "new" ? Sub : SubChain;\n\tmul: T extends "new" ? Mul : MulChain;\n\tdiv: T extends "new" ? Div : DivChain;\n\tmod: T extends "new" ? Mod : ModChain;\n\texp: T extends "new" ? Exp : ExpChain;\n\tsqrt: T extends "new" ? Sqrt : NumberExpression;\n\tcbrt: T extends "new" ? Cbrt : NumberExpression;\n\tfact: T extends "new" ? Fact : NumberExpression;\n\tabs: T extends "new" ? Abs : NumberExpression;\n}\ninterface Add {\n\t(arg1: NumberArgument): AddChain;\n\t(arg1: NumberArgument, arg2: NumberArgument): NumberExpression;\n}\ninterface AddChain {\n\t(arg2: NumberArgument): NumberExpression;\n}\ninterface Sub {\n\t(arg1: NumberArgument): SubChain;\n\t(arg1: NumberArgument, arg2: NumberArgument): NumberExpression;\n}\ninterface SubChain {\n\t(arg2: NumberArgument): NumberExpression;\n}\ninterface Mul {\n\t(arg1: NumberArgument): MulChain;\n\t(arg1: NumberArgument, arg2: NumberArgument): NumberExpression;\n}\ninterface MulChain {\n\t(arg2: NumberArgument): NumberExpression;\n}\ninterface Div {\n\t(arg1: NumberArgument): DivChain;\n\t(arg1: NumberArgument, arg2: NumberArgument): NumberExpression;\n}\ninterface DivChain {\n\t(arg2: NumberArgument): NumberExpression;\n}\ninterface Mod {\n\t(arg1: NumberArgument): ModChain;\n\t(arg1: NumberArgument, arg2: NumberArgument): NumberExpression;\n}\ninterface ModChain {\n\t(arg2: NumberArgument): NumberExpression;\n}\ninterface Exp {\n\t(arg1: NumberArgument): ExpChain;\n\t(arg1: NumberArgument, arg2: NumberArgument): NumberExpression;\n}\ninterface ExpChain {\n\t(arg2: NumberArgument): NumberExpression;\n}\ninterface Sqrt {\n\t(arg1: NumberArgument): NumberExpression;\n}\ninterface Cbrt {\n\t(arg1: NumberArgument): NumberExpression;\n}\ninterface Fact {\n\t(arg1: NumberArgument): NumberExpression;\n}\ninterface Abs {\n\t(arg1: NumberArgument): NumberExpression;\n}\ninterface StringOperations<T extends StringTypes> {\n\tlike: T extends "new" ? Like : LikeChain;\n\tnotLike: T extends "new" ? NotLike : NotLikeChain;\n\tconcat: T extends "new" ? Concat : ConcatChain;\n\tsimilarTo: T extends "new" ? SimilarTo : SimilarToChain;\n\tnotSimilarTo: T extends "new" ? NotSimilarTo : NotSimilarToChain;\n\tlower: T extends "new" ? Lower : StringExpression;\n\tupper: T extends "new" ? Upper : StringExpression;\n}\ninterface Like {\n\t(strings: TemplateStringsArray, ...args: any[]): LikeChain;\n\t(arg1: StringArgument): LikeChain;\n\t(arg1: StringArgument, arg2: StringArgument): LikeEscape;\n}\ninterface LikeChain {\n\t(strings: TemplateStringsArray, ...args: any[]): LikeEscape;\n\t(arg2: StringArgument): LikeEscape;\n}\ninterface LikeEscape extends BooleanExpression {\n\tescape(strings: TemplateStringsArray, ...args: any[]): BooleanExpression;\n\tescape(character: StringArgument): BooleanExpression;\n}\ninterface NotLike {\n\t(strings: TemplateStringsArray, ...args: any[]): NotLikeChain;\n\t(arg1: StringArgument): NotLikeChain;\n\t(arg1: StringArgument, arg2: StringArgument): LikeEscape;\n}\ninterface NotLikeChain {\n\t(strings: TemplateStringsArray, ...args: any[]): LikeEscape;\n\t(arg2: StringArgument): LikeEscape;\n}\ninterface Concat {\n\t(...args: StringArgument[]): ConcatChain;\n}\ninterface ConcatChain extends Concat, StringExpression {\n}\ninterface SimilarTo {\n\t(arg1: StringArgument): SimilarToChain;\n\t(arg1: StringArgument, arg2: StringArgument): BooleanExpression;\n}\ninterface SimilarToChain {\n\t(arg2: StringArgument): BooleanExpression;\n}\ninterface NotSimilarTo {\n\t(arg1: StringArgument): NotSimilarToChain;\n\t(arg1: StringArgument, arg2: StringArgument): BooleanExpression;\n}\ninterface NotSimilarToChain {\n\t(arg2: StringArgument): BooleanExpression;\n}\ninterface Lower {\n\t(arg: StringArgument): StringExpression;\n}\ninterface Upper {\n\t(arg: StringArgument): StringExpression;\n}\ninterface ArrayOperations<T extends ArrayTypes> {\n\tunnest: T extends "new" ? Unnest : UnnestChain;\n\tarrayGet: T extends "new" ? ArrayGet : ArrayGetChain;\n\tarrayAppend: T extends "new" ? ArrayAppend : ArrayAppendChain;\n\tarrayCat: T extends "new" ? ArrayCat : ArrayCatChain;\n}\ninterface Unnest {\n\t(...args: ArrayArgument[]): UnnestChain;\n}\ninterface UnnestChain extends Unnest, TableExpression {\n}\ninterface ArrayGet {\n\t(array: ArrayArgument): ArrayGetChain;\n\t(array: ArrayArgument, index: NumberArgument): UnknownExpression;\n}\ninterface ArrayGetChain {\n\t(index: NumberArgument): UnknownExpression;\n}\ninterface ArrayAppend {\n\t(array: ArrayArgument): ArrayAppendChain;\n\t(array: ArrayArgument, element: UnknownArgument): ArrayExpression;\n}\ninterface ArrayAppendChain {\n\t(element: UnknownArgument): ArrayExpression;\n}\ninterface ArrayCat {\n\t(array1: ArrayArgument): ArrayCatChain;\n\t(array1: ArrayArgument, array2: ArrayArgument): ArrayExpression;\n}\ninterface ArrayCatChain {\n\t(array2: ArrayArgument): ArrayExpression;\n}\ninterface RowOperations<T extends RowTypes> {\n}\ninterface TableOperations<T extends TableTypes> {\n\texists: T extends "new" ? Exists : BooleanExpression;\n\tnotExists: T extends "new" ? NotExists : BooleanExpression;\n}\ninterface Exists {\n\t(arg: TableArgument): BooleanExpression;\n}\ninterface NotExists {\n\t(arg: TableArgument): BooleanExpression;\n}\ninterface JSONOperations<T extends JSONTypes> {\n}\ninterface Aggregators {\n\t/** Return maximum aggregation for number column */\n\tmax(columnName): string;\n\t/** Return minimum aggregation for number column */\n\tmin(columnName): string;\n\t/** Return average aggregation for number column */\n\tavg(columnName): string;\n\t/** Return count aggregation of a query */\n\tcount(columnName): string;\n\t/** Return sum aggregation for number column */\n\tsum(columnName): string;\n}\ninterface SQ extends Select, Return, Where, Update, Delete, Insert, Values, Helper, Execute, ExpressionBuilder {\n}\ninterface SQW extends SQ, M.ExpressReturn {\n}\ninterface SQR extends SQ, M.ExpressReturn {\n}\ninterface Select extends M.With, M.Distinct, M.Return, M.Join, M.Where, M.GroupBy, M.Having, M.SetOperators, M.OrderBy, M.Limit, M.Offset, M.Logic {\n}\ninterface Update extends M.With, M.Join, M.Return, M.Where, M.Set, M.Logic {\n}\ninterface Delete extends M.With, M.Join, M.Return, M.Where, M.Delete, M.Logic {\n}\ninterface Insert extends M.With, M.Return, M.Insert, M.Logic {\n}\ninterface Values extends M.OrderBy, M.Limit, M.Offset {\n}\ninterface Helper extends M.End, M.TransactionMethods, M.GroupHelpers {\n}\ninterface Execute extends M.Execute {\n}\ninterface ConfigureFrameOptions {\n\t/** Edit starting index from which records will be retrieved from. Useful for paging. */\n\toffset?: number;\n\t/** Limit the amount of records to be retrieved. Set to -1 or null to return all records. Can be used in combination with offset. */\n\tlimit?: number | null;\n\t/** Table to sync frame with. (Projects only) */\n\ttableName?: string;\n}\ninterface FrameConfiguration {\n\t/** Edit starting index from which records will be retrieved from. Useful for paging. */\n\toffset: number;\n\t/** Limit the amount of records to be retrieved. Set to -1 or null to return all records. Can be used in combination with offset. */\n\tlimit: number | null;\n\t/** Table to sync frame with. (Projects only) */\n\ttableName?: string;\n}\ninterface Ebconfig {\n\ttt?: string;\n\tintegration: string;\n\tversion: string;\n}\ninterface AddRecordOptions {\n\t/** If true, record will be inserted at the end of the collection rather than the front. Overwrites absoluteIndex. */\n\tinsertAtEnd?: boolean;\n\t/** Values to post to EasyBase collection. Format is { column name: value } */\n\tnewRecord: Record<string, any>;\n\t/** Table to post new record to. (Projects only) */\n\ttableName?: string;\n}\ninterface DeleteRecordOptions {\n\trecord: Record<string, any>;\n\t/** Table to delete record from. (Projects only) */\n\ttableName?: string;\n}\ninterface QueryOptions {\n\t/** Name of the query saved in Easybase\'s Visual Query Builder */\n\tqueryName: string;\n\t/** If you would like to sort the order of your query by a column. Pass the name of that column here */\n\tsortBy?: string;\n\t/** By default, columnToSortBy will sort your query by ascending value (1, 2, 3...). To sort by descending set this to true */\n\tdescending?: boolean;\n\t/** Edit starting index from which records will be retrieved from. Useful for paging. */\n\toffset?: number;\n\t/** Limit the amount of records to be retrieved. Can be used in combination with offset. */\n\tlimit?: number;\n\t/** This object can be set to overwrite the query values as set in the integration menu. If your query is setup to find records where \'age\' >= 0, passing in { age: 50 } will query where \'age\' >= 50. Read more: https://easybase.io/about/2020/09/15/Customizing-query-values/ */\n\tcustomQuery?: Record<string, any>;\n\t/** Table to query. (Projects only) */\n\ttableName?: string;\n}\ninterface FileFromURI {\n\t/** Path on local device to the attachment. Usually received from react-native-image-picker or react-native-document-picker */\n\turi: string;\n\t/** Name of the file with proper extension */\n\tname: string;\n\t/** File MIME type */\n\ttype: string;\n}\ninterface UpdateRecordAttachmentOptions {\n\t/** EasyBase Record to attach this attachment to */\n\trecord: Record<string, any>;\n\t/** The name of the column that is of type file/image/video */\n\tcolumnName: string;\n\t/** Either an HTML File element containing the correct type of attachment or a FileFromURI object for React Native instances.\n\t * For React Native use libraries such as react-native-image-picker and react-native-document-picker.\n\t * The file name must have a proper file extension corresponding to the attachment.\n\t */\n\tattachment: File | FileFromURI;\n\t/** Table to post attachment to. (Projects only) */\n\ttableName?: string;\n}\ninterface StatusResponse {\n\t/** Returns true if the operation was successful */\n\tsuccess: boolean;\n\t/** Readable description of the the operation\'s status */\n\tmessage: string;\n\t/** Will represent a corresponding error if an error was thrown during the operation. */\n\terror?: Error;\n}\nenum DB_STATUS {\n\tERROR = "error",\n\tPENDING = "pending",\n\tSUCCESS = "success"\n}\nenum EXECUTE_COUNT {\n\tALL = "all",\n\tONE = "one"\n}\ninterface EasybaseProviderPropsOptions {\n\t/** Custom authentication string. Can be set in integration menu. If it is set, it is required to access integration. This acts as an extra layer of security and extensibility. */\n\tauthentication?: string;\n\t/** Log Easybase react status and events to console. */\n\tlogging?: boolean;\n}\ninterface EasybaseProviderProps {\n\t/** React elements */\n\tchildren: JSX.Element[] | JSX.Element;\n\t/** Easybase ebconfig object. Can be downloaded in the integration drawer next to \'React Token\'. This is automatically generated.  */\n\tebconfig: Ebconfig;\n\t/** Optional configuration parameters. */\n\toptions?: EasybaseProviderPropsOptions;\n}\ninterface UseReturnValue {\n\tframe: Record<string, any>[];\n\t/** Call this function to unsubscribe to future events */\n\tunsubscribe(): void;\n\t/** Errors that occur in the useReturn workflow */\n\terror: any;\n\t/**\n\t * @async\n\t */\n\tmanualFetch(): Promise<void>;\n\t/** Is the frame awaiting a response from server to be set to */\n\tloading: boolean;\n}\ninterface ContextValue {\n\t/**\n\t * Pass a callback function to run when a user signs in. This callback function will run after either successfully\n\t * signing in with the signIn() function OR after a user is automatically signed in via valid tokens saved to the browser from a\n\t * previous instance. This is best placed with useEffect(() => {}, []);\n\t * @param callback callback function to run on sign in event\n\t */\n\tonSignIn(callback: () => void): void;\n\t/**\n\t * Check if a user is currently signed in.\n\t */\n\tisUserSignedIn(): boolean;\n\t/**\n\t * Sign out the current user and invalidate their cached tokens.\n\t */\n\tsignOut(): void;\n\t/**\n\t * Retrieve the currently signed in users attribute object.\n\t * @async\n\t * @return {Promise<Record<string, string>>} Promise<Record<string, string>>\n\t */\n\tgetUserAttributes(): Promise<Record<string, string>>;\n\t/**\n\t * Set a single attribute of the currently signed in user. Can also be updated visually in the Easybase \'Users\' tab.\n\t * @async\n\t * @abstract\n\t * @param key Object key. Can be a new key or existing key.\n\t * @param value attribute value.\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tsetUserAttribute(key: string, value: string): Promise<StatusResponse>;\n\t/**\n\t * Sign in a user that already exists for a project. This will save authentication tokens to a user\'s browser so that\n\t * they will be automatically authenticated when they return to the application. These authentcation tokens will become invalid\n\t * when a user signs out or after 24 hours.\n\t * @abstract\n\t * @async\n\t * @param userID unique identifier for new user. Usually an email or phone number.\n\t * @param password user password.\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tsignIn(userID: string, password: string): Promise<StatusResponse>;\n\t/**\n\t * Create a new user for your project. You must still call signIn() after signing up.\n\t * @abstract\n\t * @async\n\t * @param newUserID unique identifier for new user. Usually an email or phone number.\n\t * @param password user password. Must be at least 8 characters long.\n\t * @param userAttributes Optional object to store user attributes. Can also be edited visually in the Easybase \'Users\' tab.\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tsignUp(newUserID: string, password: string, userAttributes?: Record<string, string>): Promise<StatusResponse>;\n\t/**\n\t *\n\t * This hook runs when the Frame changes. This can be triggered by calling sync().\n\t * @abstract\n\t * @param {React.EffectCallback} effect Callback function that executes when Frame changes.\n\t */\n\tuseFrameEffect(effect: React.EffectCallback): void;\n\t/**\n\t  *\n\t  * Configure the current frame size. Set the offset and amount of records to retreive assume you don\'t want to receive\n\t  * your entire collection. This is useful for paging.\n\t  * @abstract\n\t  * @param {ConfigureFrameOptions} options ConfigureFrameOptions\n\t  * @return {StatusResponse} StatusResponse\n\t  */\n\tconfigureFrame(options: ConfigureFrameOptions): StatusResponse;\n\t/**\n\t * Manually add a record to your collection regardless of your current frame. You must call sync() after this to see updated response.\n\t * @abstract\n\t * @async\n\t * @param {AddRecordOptions} options AddRecordOptions\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\taddRecord(options: AddRecordOptions): Promise<StatusResponse>;\n\t/**\n\t * Manually delete a record from your collection regardless of your current frame. You must call sync() after this to see updated response.\n\t * @abstract\n\t * @async\n\t * @param {Record<string, any>} record\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tdeleteRecord(options: DeleteRecordOptions): Promise<StatusResponse>;\n\t/**\n\t *\n\t * Call this method to syncronize your current changes with your database. Delections, additions, and changes will all be reflected by your\n\t * backend after calling this method. Call Frame() after this to get a normalized array of the freshest data.\n\t * @abstract\n\t * @async\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tsync(): Promise<StatusResponse>;\n\t/**\n\t * Upload an image to your backend and attach it to a specific record. columnName must reference a column of type \'image\'.\n\t * The file must have an extension of an image.\n\t * Call sync() for fresh data with proper attachment links to cloud hosting.\n\t * @abstract\n\t * @async\n\t * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tupdateRecordImage(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n\t/**\n\t * Upload a video to your backend and attach it to a specific record. columnName must reference a column of type \'video\'.\n\t * The file must have an extension of a video.\n\t * Call sync() for fresh data with proper attachment links to cloud hosting.\n\t * @abstract\n\t * @async\n\t * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tupdateRecordVideo(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n\t/**\n\t * Upload a file to your backend and attach it to a specific record. columnName must reference a column of type \'file\'.\n\t * Call sync() for fresh data with proper attachment links to cloud hosting.\n\t * @abstract\n\t * @async\n\t * @param {UpdateRecordAttachmentOptions} options UpdateRecordAttachmentOptions\n\t * @return {Promise<StatusResponse>} Promise<StatusResponse>\n\t */\n\tupdateRecordFile(options: UpdateRecordAttachmentOptions): Promise<StatusResponse>;\n\t/**\n\t *\n\t * This function is how you access your current frame. This function does not get new data or push changes to Easybase. If you\n\t * want to syncronize your frame and Easybase, call sync() then Frame().\n\t * @abstract\n\t * @return {Record<string, any>[]} Array of records corresponding to the current frame. Call sync() to push changes that you have made to this array.\n\t *\n\t */\n\tFrame(): Record<string, any>[];\n\t/**\n\t *\n\t * This function is how you access a single object your current frame. This function does not get new data or push changes to Easybase. If you\n\t * want to syncronize your frame and Easybase, call sync() then Frame().\n\t * @abstract\n\t * @param {number} [index] Passing an index will only return the object at that index in your Frame, rather than the entire array. This is useful for editing single objects based on an index.\n\t * @return {Record<string, any>} Single record corresponding to that object within the current frame. Call sync() to push changes that you have made to this object.\n\t *\n\t */\n\tFrame(index: number): Record<string, any>;\n\t/**\n\t * Gets the number of records in your table.\n\t * @async\n\t * @returns {Promise<number>} The the number of records in your table.\n\t */\n\tfullTableSize(): Promise<number>;\n\t/**\n\t * Gets the number of records in your table.\n\t * @async\n\t * @param {string} [tableName] Name of table to get the sizes of. (Projects only)\n\t * @returns {Promise<number>} The the number of records in your table.\n\t */\n\tfullTableSize(tableName: string): Promise<number>;\n\t/**\n\t * Retrieve an object detailing the columns in your table mapped to their corresponding type.\n\t * @async\n\t * @returns {Promise<Record<string, any>>} Object detailing the columns in your table mapped to their corresponding type.\n\t */\n\ttableTypes(): Promise<Record<string, any>>;\n\t/**\n\t * Retrieve an object detailing the columns in your table mapped to their corresponding type.\n\t * @async\n\t * @param {string} [tableName] Name of table to get the types of. (Projects only)\n\t * @returns {Promise<Record<string, any>>} Object detailing the columns in your table mapped to their corresponding type.\n\t */\n\ttableTypes(tableName: string): Promise<Record<string, any>>;\n\t/**\n\t * View your frames current configuration\n\t */\n\tcurrentConfiguration(): FrameConfiguration;\n\t/**\n\t * @async\n\t * View a query by name. This returns an isolated array that has no effect on your frame or frame configuration. sync() and Frame() have no\n\t * relationship with a Query(). An edited Query cannot be synced with your database, use Frame() for realtime\n\t * database array features.\n\t * @param {QueryOptions} options QueryOptions\n\t * @return {Promise<Record<string, any>[]>} Isolated array of records in the same form as Frame(). Editing this array has no effect and cannot be synced with your database. Use Frame() for realtime database features.\n\t */\n\tQuery(options: QueryOptions): Promise<Record<string, any>[]>;\n\t/**\n\t * Instantiate EasyQB instance for dynamic CRUD query building: https://easybase.github.io/EasyQB/\n\t * @param {string} [tableName] Name of your table.\n\t * @param {boolean} [userAssociatedRecordsOnly] **PROJECTS ONLY** Operations will only be performed on records already associated to the currently signed-in user. Inserted records will automatically be associate to the user.\n\t * @returns {SQW} EasyQB object for dynamic querying: https://easybase.github.io/EasyQB/\n\t */\n\tdb(tableName?: string, userAssociatedRecordsOnly?: boolean): SQW;\n\t/**\n\t * Subscribe to db events, invoked by calling .all or .one: https://easybase.github.io/EasyQB/\n\t * @param {function(status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any):void} [callback] Callback function to execute on db operations.\n\t * @returns {function():void} Calling this function unsubscribes your callback function from events.\n\t */\n\tdbEventListener(callback: (status?: DB_STATUS, queryType?: string, executeCount?: EXECUTE_COUNT, tableName?: string | null, returned?: any) => void): () => void;\n\t/**\n\t * Expressions and operations builder for used to create complex conditions, aggregators, and clauses. https://easybase.github.io/EasyQB/docs/operations.html\n\t */\n\te: NewExpression;\n\t/**\n\t * @param {function():SQW} dbInstance Function returning an instance of without having called .all or .one\n\t * @param {React.DependencyList} deps If present, instance will be reloaded if the values in the list change.\n\t * @return {UseReturnValue} Object with the required values to statefully access an array that is subscribed to local executions to the corresponding db instance.\n\t */\n\tuseReturn(dbInstance: () => SQW, deps?: React.DependencyList): UseReturnValue;\n}\nexport declare const EasybaseProvider: ({ children, ebconfig, options }: EasybaseProviderProps) => JSX.Element;\nexport declare const useEasybase: () => ContextValue;\n/**\n * @async\n * Call a cloud function, created in Easybase interface.\n * @param {string} route Route as detailed in Easybase. Found under \'Deploy\'. Will be in the form of ####...####-function-name.\n * @param {Record<string, any>} postBody Optional object to pass as the body of the POST request. This object will available in your cloud function\'s event.body.\n * @return {Promise<string>} Response from your cloud function. Detailed with a call to \'return context.succeed("RESPONSE")\'.\n */\nexport declare const callFunction: (route: string, postBody?: Record<string, any>) => Promise<string>;\n\n\n'," }"),"file:///node_modules/easybase-react/index.d.ts");var r=n.getAction("editor.foldAll");window.setTimeout((function(){return r.run()}),500)},beforeMount:function(e){e.languages.typescript.typescriptDefaults.setCompilerOptions(Object(o.a)(Object(o.a)({},e.languages.typescript.typescriptDefaults.getCompilerOptions()),{},{typeRoots:["file:///node_modules/@types"],noUnusedParameters:!1,noImplicitUseStrict:!0,noUnusedLocals:!0,checkJs:!0,noImplicitAny:!1,noImplicitReturns:!1,noImplicitThis:!1,allowNonTsExtensions:!0,moduleResolution:2,module:1,allowSyntheticDefaultImports:!1,skipLibCheck:!0,esModuleInterop:!0,jsx:e.languages.typescript.JsxEmit.React,jsxFactory:"React.createElement",reactNamespace:"React",allowJs:!0,target:e.languages.typescript.ScriptTarget.Latest})),e.languages.typescript.typescriptDefaults.setDiagnosticsOptions(Object(o.a)(Object(o.a)({},e.languages.typescript.typescriptDefaults.getDiagnosticsOptions()),{},{noSemanticValidation:!0,noSyntaxValidation:!0}))},options:{minimap:{scale:.75,showSlider:"mouseover",enabled:!1},padding:{top:10},wordWrap:"on",rulers:[],fontSize:"12",lineNumbers:"off",lineDecorationsWidth:0,scrollBeyondLastLine:!1}})}var d=t(66),m=t(60),p=t(11),T=(t(120),t(121),t(122),t(158)),g=t(28),b=t(19),y=t(159),h=t(160),f={whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",marginTop:6},E=function(e){return[e.getFullYear(),("0"+(e.getMonth()+1)).slice(-2),("0"+e.getDate()).slice(-2)].join("-")};function M(){var e=Object(r.useState)(null),n=Object(p.a)(e,2),t=n[0],a=n[1],i=Object(r.useState)(E(new Date)),s=Object(p.a)(i,2),l=s[0],u=s[1],M=Object(r.useState)(null),x=Object(p.a)(M,2),A=x[0],C=x[1],R=Object(r.useState)(null),v=Object(p.a)(R,2),S=v[0],P=v[1],w=Object(r.useState)(null),D=Object(p.a)(w,2),F=D[0],k=D[1],O=Object(r.useState)(!1),I=Object(p.a)(O,2),j=I[0],N=I[1],G=Object(r.useState)(!1),V=Object(p.a)(G,2),B=V[0],U=V[1],q=Object(r.useState)(!1),W=Object(p.a)(q,2),J=W[0],z=W[1],K=Object(r.useState)(""),_=Object(p.a)(K,2),Q=_[0],X=_[1],Y=Object(r.useState)(""),Z=Object(p.a)(Y,2),$=Z[0],ee=Z[1],ne=Object(r.useState)(0),te=Object(p.a)(ne,2),re=te[0],ae=te[1],ie=Object(r.useState)(""),se=Object(p.a)(ie,2),oe=se[0],le=se[1],ce=Object(r.useState)("Default"),ue=Object(p.a)(ce,2),de=ue[0],me=ue[1],pe=Object(r.useState)("/home"),Te=Object(p.a)(pe,2),ge=Te[0],be=Te[1],ye=Object(r.useState)({}),he=Object(p.a)(ye,2),fe=he[0],Ee=he[1],Me=Object(r.useState)([{rating:79,title:"Captain Kidd",released:"1945-02-15",image:"https://images.unsplash.com/photo-1615415345211-8fca5d8dc733?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80",_key:"1"},{rating:70,title:"Letter of Introduction",released:"1938-02-13",image:"https://images.unsplash.com/photo-1617213861681-30a2a883c9b7?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=635&q=80",_key:"2"},{rating:98,title:"The Sage at Dawn",released:"1955-01-20",image:"https://images.unsplash.com/photo-1500363340367-fce1e31173af?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1351&q=80",_key:"3"},{rating:98,title:"West of the Divide",released:"1934-12-29",image:"https://images.unsplash.com/photo-1541614101331-1a5a3a194e92?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=701&q=80",_key:"4"},{rating:69,title:"The Secret Hour",released:"1928-05-05",image:"https://images.unsplash.com/photo-1604120745969-ec66b59a3242?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=673&q=80",_key:"5"}]),He=Object(p.a)(Me,2),Le=He[0],xe=He[1];function Ae(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var n=16*Math.random()|0;return("x"==e?n:3&n|8).toString(16)}))}var Ce=function(){u(new Date),a(null),C(null),P(null),U(!1)},Re=function(e){z(!1),X(""),ee("")};return Object(c.jsxs)("div",{className:"bp3-dark",style:{width:"100%",height:"100%",backgroundColor:"#293742"},id:"example-root",children:[Object(c.jsx)(T.l,{children:Object(c.jsxs)(T.l.Group,{align:g.a.CENTER,style:{justifyContent:"space-between"},children:[Object(c.jsx)("div",{children:Object(c.jsx)(T.l.Heading,{children:Object(c.jsx)("b",{children:"Simulated App"})})}),Object(c.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[Object(c.jsx)(T.a,{className:"bp3-minimal",text:"Popular",onClick:function(e){return be("/popular")}}),Object(c.jsx)(T.a,{className:"bp3-minimal",text:"Home",onClick:function(e){return be("/home")}}),Object(c.jsx)(T.a,{className:"bp3-minimal",text:"Starred",onClick:function(e){return be("/stars")}}),Object(c.jsx)(T.l.Divider,{}),j?Object(c.jsx)(T.a,{icon:"user",intent:"danger",rightIcon:"remove",text:F,onClick:function(){k(null),N(!1)}}):Object(c.jsx)(T.a,{icon:"user",intent:"success",text:"Sign In",onClick:function(e){return z(!0)}})]})]})}),"/home"===ge&&Object(c.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",height:"100%",overflow:"scroll"},children:[Object(c.jsx)("div",{children:Object(c.jsxs)("div",{style:{display:"flex",flexDirection:"column",justifyContent:"space-between",width:350,marginTop:20},children:[Object(c.jsx)(T.e,{label:"Minimum Rating:",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(T.m,{style:{width:136},value:re,onValueChange:function(e){return ae(+e)}})}),Object(c.jsx)(T.e,{label:"Title Starts With:",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(T.i,{style:{width:165},placeholder:"The St...",value:oe,onChange:function(e){return le(e.target.value)}})}),Object(c.jsx)(T.e,{label:"Sort By:",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(h.a,{items:["Default","Released","Title","Rating"],onItemSelect:function(e){return me(e)},itemRenderer:function(e,n){var t=n.handleClick;return Object(c.jsx)(T.k,{icon:"sort",text:e,onClick:t,shouldDismissPopover:!0})},filterable:!1,activeItem:de,children:Object(c.jsx)(T.a,{style:{width:165,display:"flex",justifyContent:"space-between"},text:de,rightIcon:"caret-down"})})}),Object(c.jsx)(T.d,{})]})}),Object(c.jsx)(T.b,{interactive:!0,onClick:function(e){return U(!0)},elevation:b.a.ZERO,style:{margin:14,width:350,display:"flex",position:"relative",alignItems:"center",justifyContent:"center"},children:Object(c.jsx)("h4",{children:Object(c.jsx)("a",{children:"+ Add Card"})})}),function(e){var n,t=[],r=Object(m.a)(e);try{for(r.s();!(n=r.n()).done;){var a=n.value;oe?a.rating>=re&&String(a.title).toLowerCase().startsWith(oe.toLowerCase())&&t.push(a):a.rating>=re&&t.push(a)}}catch(i){r.e(i)}finally{r.f()}return"Released"===de?t.sort((function(e,n){return new Date(n.released).getTime()-new Date(e.released).getTime()})):"Rating"===de?t.sort((function(e,n){return n.rating-e.rating})):"Title"===de&&t.sort((function(e,n){return String(n.title).localeCompare(String(e.title))})),t}(Le).map((function(e){return Object(c.jsxs)(T.b,{elevation:b.a.THREE,style:{margin:14,width:350,display:"flex",position:"relative",height:150,minHeight:150,maxHeight:150},children:[Object(c.jsxs)("div",{children:[Object(c.jsx)("h3",{style:f,children:e.title}),Object(c.jsxs)("p",{children:[e.released," \xb7 ",Object(c.jsxs)("b",{children:[e.rating,"/100"]})]}),j&&fe[F]&&fe[F].includes(e._key)?Object(c.jsx)(T.a,{icon:"add-location",disabled:!0,children:"Saved"}):Object(c.jsx)(T.a,{icon:"add-location",onClick:function(n){return t=e._key,void(j?Ee((function(e){var n=e[F];return n.includes(t)||(n.push(t),e[F]=n),Object(o.a)({},e)})):z(!0));var t},children:"Save"})]}),Object(c.jsx)("img",{src:e.image,style:{position:"absolute",width:130,height:150,objectFit:"cover",top:0,right:0,borderTopRightRadius:3,borderBottomRightRadius:3}})]})})),Object(c.jsx)("div",{style:{margin:100}})]}),"/stars"===ge&&Object(c.jsx)(H,{setUserData:Ee,cards:Le,username:F,isUserSignedIn:j,userData:fe,setIsSignInDialogOpen:z}),"/popular"===ge&&Object(c.jsx)(L,{}),Object(c.jsxs)(T.c,{isOpen:B,onClose:Ce,usePortal:!0,portalContainer:document.getElementById("example-root"),style:{width:450},children:[Object(c.jsx)("h2",{style:{marginLeft:20,marginTop:25},children:"Add New Film"}),Object(c.jsxs)("div",{style:{width:"100%",justifyContent:"center",display:"flex",flexDirection:"column",alignItems:"center",paddingLeft:20,paddingRight:20,paddingTop:20},children:[Object(c.jsx)(T.e,{label:"Film Title",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(T.i,{placeholder:"Bowery at Midnight",value:t,onChange:function(e){return a(e.target.value)}})}),Object(c.jsx)(T.e,{label:"Rating out of 100",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(T.m,{placeholder:"44",style:{width:136},value:A,onValueChange:function(e){return C(+e)}})}),Object(c.jsx)(T.e,{label:"Released Date",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(y.a,{parseDate:function(e){return new Date(e)},formatDate:function(e){return e.toLocaleDateString()},value:new Date(l),onChange:function(e){return u(E(e))}})}),Object(c.jsx)(T.e,{label:"Film image link",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%",marginBottom:30},children:Object(c.jsx)(T.i,{placeholder:"https://images.googl...",value:S,onChange:function(e){return P(e.target.value)}})}),Object(c.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"flex-end"},children:Object(c.jsx)(T.a,{onClick:function(){console.log({released:l,title:t,rating:A,image:S,_key:Ae()}),xe((function(e){return"object"===typeof l?e.unshift({released:E(new Date),title:t,rating:A,image:S,_key:Ae()}):e.unshift({released:l,title:t,rating:A,image:S,_key:Ae()}),Ce(),Object(d.a)(e)}))},intent:"success",icon:"plus",children:"Go!"})})]})]}),Object(c.jsxs)(T.c,{isOpen:J,onClose:Re,usePortal:!0,portalContainer:document.getElementById("example-root"),style:{width:350},children:[Object(c.jsx)("h2",{style:{marginLeft:20,marginTop:25},children:"Sign In"}),Object(c.jsx)("p",{style:{marginLeft:20},children:"(Fake credentials work for demonstration)"}),Object(c.jsxs)("div",{style:{width:"100%",justifyContent:"center",display:"flex",flexDirection:"column",alignItems:"center",paddingLeft:20,paddingRight:20,paddingTop:20},children:[Object(c.jsx)(T.e,{label:"Username",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(T.i,{placeholder:"jake@gmail.com",value:Q,onChange:function(e){return X(e.target.value)}})}),Object(c.jsx)(T.e,{label:"Password",labelFor:"text-input",inline:!0,style:{display:"flex",justifyContent:"space-between",width:"100%"},children:Object(c.jsx)(T.i,{type:"password",value:$,onChange:function(e){return ee(e.target.value)}})}),Object(c.jsx)("div",{style:{display:"flex",width:"100%",justifyContent:"flex-end"},children:Object(c.jsx)(T.a,{onClick:function(){Q&&$&&(N(!0),Ee((function(e){return e[Q]||(e[Q]=[]),Re(),k(Q),Object(o.a)({},e)})))},intent:"success",icon:"plus",children:"Go!"})})]})]})]})}function H(e){var n=e.username,t=e.isUserSignedIn,a=e.userData,i=e.setIsSignInDialogOpen,s=e.cards,l=e.setUserData;Object(r.useEffect)((function(){t||i(!0)}),[]);return t&&n&&a[n]?Object(c.jsx)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",height:"100%",overflow:"scroll"},children:a[n].map((function(e){var t=s.find((function(n){return n._key===e}));return t?Object(c.jsxs)(T.b,{elevation:b.a.THREE,style:{margin:14,width:350,display:"flex",position:"relative",height:150,minHeight:150,maxHeight:150},children:[Object(c.jsxs)("div",{children:[Object(c.jsx)("h3",{style:f,children:t.title}),Object(c.jsxs)("p",{children:[t.released," \xb7 ",Object(c.jsxs)("b",{children:[t.rating,"/100"]})]}),Object(c.jsx)(T.a,{icon:"delete",onClick:function(e){return function(e){l((function(t){var r=t[n];return r.includes(e)&&(r.splice(r.indexOf(e),1),t[n]=r),Object(o.a)({},t)}))}(t._key)},children:"Unsave"})]}),Object(c.jsx)("img",{src:t.image,style:{position:"absolute",width:130,height:150,objectFit:"cover",top:0,right:0,borderTopRightRadius:3,borderBottomRightRadius:3}})]}):Object(c.jsx)(c.Fragment,{})}))}):Object(c.jsx)(c.Fragment,{})}function L(){var e=Object(r.useState)(!0),n=Object(p.a)(e,2),t=n[0],a=n[1];Object(r.useEffect)((function(){setTimeout((function(){return a(!1)}),2e3)}),[]);var i=["The Devil Bat","Half Shot at Sunrise","The Last Man on Earth","Second Chorus"],s=["https://images.unsplash.com/photo-1566729695605-4c9d77e1abe3?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=675&q=80","https://images.unsplash.com/photo-1611377440737-dc4a2613582b?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80","https://images.unsplash.com/photo-1603971632909-6097de19bafe?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=675&q=80","https://images.unsplash.com/photo-1574145600459-1af754d64e3e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80","https://images.unsplash.com/photo-1574145714156-5b87ca393057?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1350&q=80"];return Object(c.jsxs)("div",{children:[Object(c.jsxs)("h1",{style:{textAlign:"center"},children:["Today is ",(new Date).toDateString()," and ",Object(c.jsx)("br",{}),"the most popular film was:"]}),Object(c.jsx)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",marginTop:10},children:t?Object(c.jsx)(T.o,{}):Object(c.jsxs)(T.b,{elevation:b.a.THREE,style:{margin:14,width:350,display:"flex",position:"relative",height:150,minHeight:150,maxHeight:150},children:[Object(c.jsxs)("div",{children:[Object(c.jsx)("h3",{style:f,children:i[i.length*Math.random()|0]}),Object(c.jsxs)("p",{children:[E(new Date(+new Date-Math.floor(1e10*Math.random())))," \xb7 ",Object(c.jsxs)("b",{children:[Math.floor(51*Math.random())+50,"/100"]})]})]}),Object(c.jsx)("img",{src:s[s.length*Math.random()|0],style:{position:"absolute",width:130,height:150,objectFit:"cover",top:0,right:0,borderTopRightRadius:3,borderBottomRightRadius:3}})]})})]})}var x=function(){return Object(c.jsxs)("div",{style:{display:"flex",height:"100vh",overflow:"hidden"},children:[Object(c.jsx)("div",{style:{display:"flex",flexBasis:"50%"},children:Object(c.jsx)(u,{})}),Object(c.jsx)("div",{style:{display:"flex",flexBasis:"50%",height:"100%"},children:Object(c.jsx)(M,{})})]})},A=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,161)).then((function(n){var t=n.getCLS,r=n.getFID,a=n.getFCP,i=n.getLCP,s=n.getTTFB;t(e),r(e),a(e),i(e),s(e)}))};s.a.render(Object(c.jsx)(a.a.StrictMode,{children:Object(c.jsx)(x,{})}),document.getElementById("root")),A()}},[[153,1,2]]]);
//# sourceMappingURL=main.2f05dd09.chunk.js.map