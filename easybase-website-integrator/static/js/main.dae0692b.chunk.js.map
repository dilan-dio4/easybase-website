{"version":3,"sources":["ThreeSwitch.js","QueryListGenerator.js","integrator-popup/IntegratorPopupDialogContents-Container.js","integrator-popup/IntegratorPopupDialogContent.js","integrator-popup/IntegratorPopup.js","App.js","theme.js","index.js"],"names":["ThreeSwitchBase","withStyles","root","padding","checked","disabled","input","cursor","position","opacity","width","height","top","left","margin","zIndex","name","forwardRef","props","ref","autoFocus","classes","checkedIcon","className","disabledProp","Icon","NullIcon","id","inputProps","inputRef","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value","other","muiFormControl","useFormControl","hasLabelFor","IconButton","component","clsx","nulled","role","undefined","event","newChecked","ThreeSwitch","color","size","thumb","capitalize","slashIconSmall","slashIcon","switchBase","track","theme","display","overflow","boxSizing","flexShrink","verticalAlign","colorAdjust","palette","grey","transition","transitions","create","duration","shortest","transform","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","common","black","white","colorSecondary","secondary","sizeSmall","boxShadow","shadows","borderRadius","alignItems","justifyContent","fontSize","dayjsUTC","dayjs","utc","useStyles","makeStyles","singleComponent","spacing","flexGrow","columnHeaderTypography","wordBreak","fontWeight","whiteSpace","textOverflow","QueryListGenerator","accessorToColumnTypeMap","typeToValueMap","queryValueChangeCallback","largeText","formatAccessorNames","Object","entries","map","key","Typography","variant","accessorNameToColumnName","startOf","minute","e","hour","format","getPopupContainer","trigger","parentNode","allowClear","TextField","style","target","split","Number","newVal","HelpButton","to","CustomIcon","onClick","window","open","HelpButtonWithText","title","href","rel","tabsBorder","borderBottom","refractorRoot","codeRoot","clearButtonRoot","lighten","marginRight","error","optionsPaper","helpIcon","right","generateBareUrl","redisID","route","isMapNotAllNulls","values","some","val","generatePostBody","keyValConnector","joiner","escapeQuotes","isPython","convertValue","upperFirst","isEmpty","params","forEach","push","ele","replace","join","TabPanel","children","index","hidden","aria-labelledby","IntegratorPopupDialogContent","options","onClose","typeFormats","queryObject","authentication","defaultValues","canRead","canWrite","whitelistArray","useState","selectedTab","setSelectedTab","keys","reduce","agg","curr","setTypeToValueMap","codeLimit","setCodeLimit","codeOffset","setCodeOffset","isLimitReturnAll","setIsLimitReturnAll","insertAtEnd","setInsertAtEnd","updateValues","setUpdateValues","Container","language_content","useMemo","fixedTypeToValueMap","limit","offset","authActive","_generate_language_variables","col_type","col_name","lang","key_object_example","language_name","code_string","_javascript_code_gen","prism_code","footer","_node_code_gen","param_string","_python_option","_python_code_gen","getAuthentationValueElement","elements","document","querySelectorAll","Array","prototype","filter","call","element","RegExp","test","textContent","useEffect","Prism","plugins","NormalizeWhitespace","setDefaults","highlightAll","toLowerCase","getURLElement","classList","add","handleCodeLimitChange","handleCodeOffsetChange","handleQueryValueChange","new_val","prev","handleUpdateValueChange","maxWidth","overflowX","overflowY","Tabs","scrollButtons","_","aria-label","indicatorColor","textColor","Tab","label","FormControlLabel","control","Checkbox","Paper","elevation","class","marginTop","marginBottom","bottom","IntegratorPopup","App","time","capper","authHash","createMuiTheme","light","dark","red","A400","info","success","background","default","typography","ReactDOM","render","ThemeProvider","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.dae0692b.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport capitalize from 'lodash/capitalize';\nimport useFormControl from '@material-ui/core/FormControl/useFormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nexport const threeSwitchStyles = (theme) => ({\n    /* Styles applied to the root element. */\n    root: {\n        display: 'inline-flex',\n        width: 34 + 12 * 3,\n        height: 14 + 12 * 2,\n        overflow: 'hidden',\n        padding: 12,\n        boxSizing: 'border-box',\n        position: 'relative',\n        flexShrink: 0,\n        zIndex: 0, // Reset the stacking context.\n        verticalAlign: 'middle', // For correct alignment with the text.\n        '@media print': {\n            colorAdjust: 'exact',\n        },\n    },\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        zIndex: 1, // Render above the focus ripple.\n        color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n        transition: theme.transitions.create(['left', 'transform'], {\n            duration: theme.transitions.duration.shortest,\n        }),\n        '&$checked': {\n            transform: 'translateX(32px)',\n        },\n        '&$nulled': {\n            transform: 'translateX(16px)',\n        },\n        '&$disabled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n        },\n        '&$checked + $track': {\n            opacity: 0.5,\n        },\n        '&$disabled + $track': {\n            opacity: theme.palette.type === 'light' ? 0.12 : 0.1,\n        },\n    },\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: {\n        '&$checked': {\n            color: theme.palette.primary.main,\n            '&:hover': {\n                backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n                '@media (hover: none)': {\n                    backgroundColor: 'transparent',\n                },\n            },\n        },\n        '&$disabled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n        },\n        '&$nulled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[800],\n        },\n        '&$checked + $track': {\n            backgroundColor: theme.palette.primary.main,\n        },\n        '&$disabled + $track': {\n            backgroundColor:\n                theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n        },\n        '&$nulled + $track': {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: {\n        '&$checked': {\n            color: theme.palette.secondary.main,\n            '&:hover': {\n                backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n                '@media (hover: none)': {\n                    backgroundColor: 'transparent',\n                },\n            },\n        },\n        '&$disabled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n        },\n        '&$nulled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[800],\n        },\n        '&$checked + $track': {\n            backgroundColor: theme.palette.secondary.main,\n        },\n        '&$disabled + $track': {\n            backgroundColor:\n                theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n        },\n        '&$nulled + $track': {\n            backgroundColor: '#777',\n        },\n    },\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n        width: 50,\n        height: 24,\n        padding: 7,\n        '& $thumb': {\n            width: 16,\n            height: 16,\n        },\n        '& $switchBase': {\n            padding: 4,\n            '&$checked': {\n                transform: 'translateX(26px)',\n            },\n            '&$nulled': {\n                transform: 'translateX(13px)',\n            },\n        },\n    },\n    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: {},\n    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n    disabled: {},\n    /* Pseudo-class applied to the internal SwitchBase component's nulled class. */\n    nulled: {},\n    /* Styles applied to the internal SwitchBase component's input element. */\n    input: {\n        left: '-100%',\n        width: '300%',\n    },\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: {\n        boxShadow: theme.shadows[1],\n        backgroundColor: 'currentColor',\n        width: 20,\n        height: 20,\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    /* Styles applied to the track element. */\n    track: {\n        height: '100%',\n        width: '100%',\n        borderRadius: 14 / 2,\n        zIndex: -1,\n        transition: theme.transitions.create(['opacity', 'background-color'], {\n            duration: theme.transitions.duration.shortest,\n        }),\n        backgroundColor:\n            theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n        opacity: theme.palette.type === 'light' ? 0.44 : 0.36,\n    },\n    slashIcon: {\n        color: theme.palette.type === 'light' ? '#757575e8' : theme.palette.common.white,\n        fontSize: 20\n    },\n    slashIconSmall : {\n        color: theme.palette.type === 'light' ? '#757575e8' : theme.palette.common.white,\n        fontSize: 14\n    }\n});\n\nconst threeSwitchBaseStyles = {\n    root: {\n        padding: 9,\n    },\n    checked: {},\n    disabled: {},\n    input: {\n        cursor: 'inherit',\n        position: 'absolute',\n        opacity: 0,\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        margin: 0,\n        padding: 0,\n        zIndex: 1,\n    },\n}\n\nconst ThreeSwitchBase = withStyles(threeSwitchBaseStyles, { name: 'PrivateThreeSwitchBase' })(forwardRef(function SwitchBase(props, ref) {\n    const {\n        autoFocus,\n        checkedIcon,\n        classes,\n        className,\n        disabled: disabledProp,\n        Icon,\n        NullIcon,\n        id,\n        inputProps,\n        inputRef,\n        name,\n        onBlur,\n        onChange,\n        onFocus,\n        readOnly,\n        required,\n        tabIndex,\n        type,\n        value,\n        ...other\n    } = props;\n\n    const muiFormControl = useFormControl();\n\n    const handleFocus = (event) => {\n        if (onFocus) {\n            onFocus(event);\n        }\n\n        if (muiFormControl && muiFormControl.onFocus) {\n            muiFormControl.onFocus(event);\n        }\n    };\n\n    const handleBlur = (event) => {\n        if (onBlur) {\n            onBlur(event);\n        }\n\n        if (muiFormControl && muiFormControl.onBlur) {\n            muiFormControl.onBlur(event);\n        }\n    };\n\n    const handleInputChange = (event) => {\n        let newChecked = null;\n        if (value === false) newChecked = null;\n        else if (value === null) newChecked = true;\n        else if (value === true) newChecked = false\n\n        if (onChange) {\n            onChange(event, newChecked);\n        }\n    };\n\n    let disabled = disabledProp;\n\n    if (muiFormControl) {\n        if (typeof disabled === 'undefined') {\n            disabled = muiFormControl.disabled;\n        }\n    }\n\n    const hasLabelFor = type === 'checkbox' || type === 'radio';\n\n    return (\n        <IconButton\n            component=\"span\"\n            className={clsx(\n                classes.root,\n                {\n                    [classes.checked]: value === true,\n                    [classes.nulled]: value === null,\n                    [classes.disabled]: disabled,\n                },\n                className,\n            )}\n            disabled={disabled}\n            tabIndex={null}\n            role={undefined}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            ref={ref}\n            {...other}\n        >\n            <input\n                autoFocus={autoFocus}\n                checked={value}\n                className={classes.input}\n                disabled={disabled}\n                id={hasLabelFor && id}\n                name={name}\n                onChange={handleInputChange}\n                readOnly={readOnly}\n                ref={inputRef}\n                required={required}\n                tabIndex={tabIndex}\n                type={type}\n                value={value}\n                {...inputProps}\n            />\n            {value === null ? NullIcon : Icon}\n        </IconButton>\n    );\n}));\n\n\nconst ThreeSwitch = forwardRef(function Switch(props, ref) {\n    const {\n        classes,\n        className,\n        color = 'secondary',\n        size = 'medium',\n        ...other\n    } = props;\n\n    const Icon = <span className={classes.thumb} />;\n    const NullIcon = <span className={classes.thumb}><RemoveIcon className={capitalize(size) === 'Small' ? classes.slashIconSmall : classes.slashIcon} /></span>\n\n    return (\n        <span\n            className={clsx(\n                classes.root,\n                {\n                    [classes[`size${capitalize(size)}`]]: size !== 'medium',\n                },\n                className,\n            )}\n        >\n            <ThreeSwitchBase\n                type=\"checkbox\"\n                Icon={Icon}\n                NullIcon={NullIcon}\n                classes={{\n                    root: clsx(classes.switchBase, classes[`color${capitalize(color)}`]),\n                    input: classes.input,\n                    checked: classes.checked,\n                    disabled: classes.disabled,\n                    nulled: classes.nulled\n                }}\n                ref={ref}\n                {...other}\n            />\n            <span className={classes.track} />\n        </span>\n    );\n});\n\nexport default withStyles(threeSwitchStyles, { name: 'ThreeSwitch' })(ThreeSwitch);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { DatePicker } from 'antd';\nimport dayjs from 'dayjs';\nimport { TimePicker } from 'antd';\nimport ThreeSwitch from './ThreeSwitch';\nimport { accessorNameToColumnName } from 'eb-utils';\n\nconst dayjsUTC = dayjs.utc;\n\nconst useStyles = makeStyles(theme => ({\n    singleComponent: {\n        padding: theme.spacing(1, 0),\n        flexGrow: 1,\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    columnHeaderTypography: {\n        wordBreak: 'break-all',\n        fontWeight: 500,\n        fontSize: 17,\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n    },\n\n}))\n\nconst QueryListGenerator = ({ accessorToColumnTypeMap, typeToValueMap, queryValueChangeCallback, largeText = false, formatAccessorNames = false }) => {\n\n    const classes = useStyles();\n\n    return (\n        <>\n            {Object.entries(accessorToColumnTypeMap).map(([key, value]) =>\n                <div className=\"my-1 d-flex align-items-center w-100\" key={`${key}`}>\n                    <Typography className={largeText && classes.columnHeaderTypography} variant={!largeText ? \"body1\": \"inherit\"}>{formatAccessorNames ? accessorNameToColumnName(key) : key}</Typography>\n                    <span className={classes.singleComponent}>\n                        {(() => {\n                            switch (value) {\n                                case \"time\":\n                                    return <TimePicker\n                                        value={typeToValueMap[key] == null ? null : dayjsUTC().startOf('day').minute(typeToValueMap[key])}\n                                        onChange={e => e === null ? queryValueChangeCallback(null, key) : queryValueChangeCallback((e.hour() * 60) + e.minute(), key)}\n                                        format=\"h:mm a\"\n                                        getPopupContainer={trigger => trigger.parentNode}\n                                        allowClear\n                                        className=\"antd-integrator-popup\"\n                                    />\n                                case \"text\":\n                                case \"richtext\":\n                                case \"file\":\n                                case \"image\":\n                                case \"video\":\n                                    return <TextField\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                        style={{ width: 125 }}\n                                        value={typeToValueMap[key] === null ? \"\" : typeToValueMap[key]}\n                                        onChange={e => e.target.value !== \"\" ? queryValueChangeCallback(e.target.value, key) : queryValueChangeCallback(null, key)}\n                                    />\n                                case \"date\":\n                                    return <DatePicker\n                                        value={typeToValueMap[key] == null ? null : dayjsUTC(typeToValueMap[key])}\n                                        onChange={e => e === null ? queryValueChangeCallback(null, key) : queryValueChangeCallback(dayjsUTC(e).startOf('day').format(\"MM-DD-YYYY\"), key)}\n                                        allowClear\n                                        className=\"antd-integrator-popup\"\n                                    />\n                                case \"location\":\n                                    return <div className=\"d-flex align-items-center justify-content-between pt-1 flex-row\" style={{ width: 200 }}>\n                                        <TextField type={'number'} inputProps={{ style: { fontSize: 14 } }} size=\"small\" value={typeToValueMap[key] == null ? \"\" : typeToValueMap[key].split(\",\")[0]} onChange={e => typeToValueMap[key] == null ? queryValueChangeCallback(\"0,0\", key) : queryValueChangeCallback(e.target.value === \"\" ? null : `${e.target.value},${typeToValueMap[key].split(\",\")[1]}`, key)} />\n                                        <TextField type={'number'} inputProps={{ style: { fontSize: 14 } }} size=\"small\" value={typeToValueMap[key] == null ? \"\" : typeToValueMap[key].split(\",\")[1]} onChange={e => typeToValueMap[key] == null ? queryValueChangeCallback(\"0,0\", key) : queryValueChangeCallback(e.target.value === \"\" ? null : `${typeToValueMap[key].split(\",\")[0]},${e.target.value}`, key)} />\n                                    </div>\n                                case \"number\":\n                                    return <TextField\n                                        variant=\"outlined\"\n                                        type=\"number\"\n                                        size=\"small\"\n                                        style={{ width: 125 }}\n                                        value={typeToValueMap[key]}\n                                        onChange={e => e.target.value !== \"\" ? queryValueChangeCallback(Number(e.target.value), key) : queryValueChangeCallback(null, key)}\n                                    />\n                                case \"boolean\":\n                                    return <ThreeSwitch\n                                        value={typeToValueMap[key]}\n                                        onChange={(e, newVal) => queryValueChangeCallback(newVal, key)}\n                                    />\n                                default:\n                                    break;\n                            }\n                        })()}\n                    </span>\n                </div>\n            )}\n        </>\n    )\n\n}\n\nexport default QueryListGenerator;","/* eslint-disable no-fallthrough */\n\nimport React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport upperFirst from 'lodash/upperFirst';\nimport { makeStyles, lighten } from '@material-ui/core/styles';\nimport ChromeReaderModeOutlinedIcon from '@material-ui/icons/ChromeReaderModeOutlined';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nconst HelpButton = ({ to, style, CustomIcon, ...other }) => CustomIcon ? <CustomIcon color=\"disabled\" style={{ cursor: 'pointer', ...style, fontSize: 20 }} onClick={() => window.open(to, \"_blank\")} {...other} /> : <HelpOutlineIcon color=\"disabled\" style={{ cursor: 'pointer', ...style, fontSize: 20 }} onClick={() => window.open(to, \"_blank\")} {...other} />\nconst HelpButtonWithText = ({ title, to, style, className, CustomIcon = undefined, ...other }) => <a className={`${className} d-flex align-items-center`} href={to} target=\"_blank\" rel=\"noopener noreferrer\" {...other}><HelpButton to={to} className=\"mr-2\" CustomIcon={CustomIcon} />{title}</a>\n\nexport const useStyles = makeStyles(theme => ({\n    tabsBorder: {\n        borderBottom: '1px solid #e8e8e8',\n    },\n    refractorRoot: {\n        padding: '5px 15px'\n    },\n    codeRoot: {\n        backgroundColor: '#272822',\n        padding: 15,\n        width: '100%',\n        borderRadius: '0.3em',\n    },\n    clearButtonRoot: {\n        color: lighten('#757575', 0.55),\n        borderRadius: 4,\n        display: 'flex',\n        cursor: 'pointer',\n        marginRight: 8,\n        '&:hover': {\n            backgroundColor: theme.palette.error.main,\n            color: '#ffffff'\n        }\n    },\n    singleComponent: {\n        padding: theme.spacing(1, 0),\n        flexGrow: 1,\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    columnHeaderTypography: {\n        wordBreak: 'break-all',\n        fontWeight: 500,\n        fontSize: 18\n    },\n    optionsPaper: {\n        borderRadius: 6,\n        position: 'relative',\n        width: 375,\n    },\n    helpIcon: {\n        position: \"absolute\",\n        top: 12,\n        right: 12,\n    }\n}));\n\nexport const generateBareUrl = (redisID, route) => `https://api.easybase.io/${route}/${redisID}`;\n\nconst isMapNotAllNulls = (typeToValueMap) => Object.values(typeToValueMap).some(val => val !== null);\n\nconst _python_option = (param_string, typeToValueMap) => {\n    if (param_string in typeToValueMap) {\n        let val = typeToValueMap[param_string];\n        if (typeof val === \"boolean\") val = val ? \"True\" : \"False\";\n        return `, ${param_string}=${param_string === \"authentication\" ? `\"${val}\"` : val}`\n    }\n    else return '';\n}\n\nexport const generatePostBody = (map, keyValConnector, joiner, escapeQuotes = false, isPython = false) => {\n\n    const convertValue = (val) => {\n        switch (typeof val) {\n            case \"string\":\n                return `\"${val}\"`;\n            case \"boolean\":\n                if (isPython) return upperFirst(\"\" + val);\n                else return \"\" + val;\n            case \"object\":\n                return isMapNotAllNulls(val) ? generatePostBody(val, keyValConnector, ', \"', escapeQuotes, isPython) : '{}';\n            default:\n                return val;\n        }\n    }\n\n    if (isEmpty(map)) return \"\";\n    const params = [];\n    Object.entries(map).forEach(([key, value]) => {\n        if (value !== null) params.push(`\"${key}\"${keyValConnector}${convertValue(value)}`);\n    })\n\n    if (escapeQuotes)\n        return params.map(ele => ele.replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\")).join(joiner);\n    else\n        return params.join(joiner);\n}\n\nexport const generateGETLanguageContent = (redisID, typeFormats, typeToValueMap) => {\n\n    const _generate_language_variables = (col_type, col_name, lang) => {\n        switch (col_type) {\n            case \"HH:MM 12h\":\n            case \"HH:MM 24h\":\n            case \"String\":\n            case \"RTE\":\n            case \"HTML\":\n            case \"URL\":\n            case \"MM/DD/YYYY\":\n            case \"YYYY/MM/DD\":\n            case \"dd-mmm-yyyy\":\n            case \"dd.mm.yyyy\":\n            case \"Location Info\":\n            case \"Coordinates\":\n            case \"ISO String\":\n            case \"Object\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: String?`\n                    case \"java\":\n                        return `String ${col_name};`\n                    default:\n                        break;\n                }\n            case \"Number\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Float?`\n                    case \"java\":\n                        return `float ${col_name};`\n                    default:\n                        break;\n                }\n            case \"1/0\":\n            case \"Total Minutes\":\n            case \"UNIX Stamp\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Int?`\n                    case \"java\":\n                        return `int ${col_name};`\n                    default:\n                        break;\n                }\n            case \"T/F\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Bool?`\n                    case \"java\":\n                        return `boolean ${col_name};`\n                    default:\n                        break;\n                }\n            case \"Array\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Array<Float> = Array()`\n                    case \"java\":\n                        return `float[] ${col_name} = new float[2];`\n                    default:\n                        break;\n                }\n            default:\n                break;\n        }\n    }\n\n    const key_object_example = \"{ \" + Object.keys(typeFormats).join(\", \") + \" }\";\n\n    const _javascript_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        const offset = typeToValueMap.offset ? typeToValueMap.offset : 'null';\n        const limit = typeToValueMap.limit ? typeToValueMap.limit : 'null';\n        delete fixedTypeToValueMap.limit;\n        delete fixedTypeToValueMap.offset;\n        delete fixedTypeToValueMap.authentication;\n        return (\n            <>\n                <code className={`language-html`}>\n                    {`\n                    <html>\n                    <head>\n                        Paste this into the <head> of your html:\n                        <script src=\"https://cdn.jsdelivr.net/npm/easybasejs/dist/bundle.js\"></script>\n                    </head>\n                    <body>\n                        ...\n                    </body>\n                    <script>\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-javascript\">\n                    {`\n                    ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n                    const customQuery = {\n                        ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n                        \")}\n                    }\n                    ` : ''}\n                    const offset = ${offset};\n                    const limit = ${limit};\n\n                    EasyBase.get({\n                        integrationID: \"${redisID}\",${typeToValueMap.authentication ? `\\n                        authentication: ${typeToValueMap.authentication},` : ''}\n                        offset,\n                        limit${isMapNotAllNulls(fixedTypeToValueMap) ? ',\\n                        customQuery' : ''}\n                    }).then(data => {\n                        console.log(data); // [ ${key_object_example}, ... ]\n                    });\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-html\">\n                    {`\n                    </script>\n                    </html>\n                    `}\n                </code>\n            </>\n        );\n    }\n\n    const _node_code_gen = () => {\n        const key_object_example = \"{ \" + Object.keys(typeFormats).join(\", \") + \" }\";\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        const offset = typeToValueMap.offset ? typeToValueMap.offset : 'null';\n        const limit = typeToValueMap.limit ? typeToValueMap.limit : 'null';\n        delete fixedTypeToValueMap.limit;\n        delete fixedTypeToValueMap.offset;\n        delete fixedTypeToValueMap.authentication;\n\n        return `\n        // npm install --save easybasejs\n\n        var Easybase = require('easybasejs');\n        ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n        const customQuery = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \")}\n        }\n        ` : ''}\n        const offset = ${offset};\n        const limit = ${limit};\n        \n        Easybase.get({\n            integrationID: \"${redisID}\",${typeToValueMap.authentication ? `\\n            authentication: ${typeToValueMap.authentication},` : ''}\n            offset,\n            limit${isMapNotAllNulls(fixedTypeToValueMap) ? ',\\n            customQuery' : ''}\n        }).then(data => {\n            console.log(data); // [ ${key_object_example}, ... ]\n        });\n        `;\n    }\n\n    const _python_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        const offset = typeToValueMap.offset ? typeToValueMap.offset : 'None';\n        const limit = typeToValueMap.limit ? typeToValueMap.limit : 'None';\n\n        delete fixedTypeToValueMap.limit;\n        delete fixedTypeToValueMap.offset;\n        delete fixedTypeToValueMap.authentication;\n        return `\n        # pip install easybase-python\n        \n        from easybase import get, post, update, delete\n        ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n        customQuery = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \", false, true)}\n        }\n        ` : ''}\n        offset = ${offset}\n        limit = ${limit}\n\n        easybase_response = get(\"${redisID}\", offset, limit${_python_option('authentication', typeToValueMap)}${isMapNotAllNulls(fixedTypeToValueMap) ? `${'authentication' in typeToValueMap ? ', customQuery=customQuery' : ', None, customQuery=customQuery'}` : ''}))\n        print(easybase_response) # [ ${key_object_example}, ... ]\n\n        `\n    }\n\n    const _java_code_gen = () => {\n\n        return `\n        import java.net.*;\n        import java.io.*;\n\n        // https://github.com/google/gson\n        import com.google.gson.Gson; \n        import com.google.gson.GsonBuilder;  \n\n        class EasybaseObj {\n            ${Object.entries(typeFormats).map(([key, value]) => _generate_language_variables(value, key, \"java\")).join(\"\\n            \")}\n        }\n\n        public class HelloWorld{\n\n            public static EasybaseObj[] easybase(String easybase_url, String postBody) throws Exception {\n                Gson gson = new Gson();\n                URL url = new URL(easybase_url);\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"POST\");\n                con.setRequestProperty(\"Content-Type\", \"application/json\");\n                con.setRequestProperty(\"Accept\", \"application/json\");\n                con.setDoOutput(true);\n                con.setDoInput(true);\n\n                OutputStream os = con.getOutputStream();\n                byte[] input = postBody.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);           \n\n                BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), \"utf-8\"));\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n\n                return gson.fromJson(response.toString(), EasybaseObj[].class);\n            }\n\n            public static void main(String[] args) {\n                String easybase_url = \"${generateBareUrl(redisID, 'get')}\";\n                ${isMapNotAllNulls(typeToValueMap) ? `\n                String postBody = \"{\"\n                    + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                    + \"', true)}\"\n                + \"}\";\n                ` : ''}      \n                try {\n                    EasybaseObj[] easybase_data = easybase(easybase_url, ${isMapNotAllNulls(typeToValueMap) ? `postBody` : `\"\"`});\n                    System.out.println(easybase_data);\n                    // [ ${key_object_example}, ... ]\n                } catch (Exception e) {\n                    System.out.println(e);\n                    \n                }\n            }\n        }`;\n\n    }\n\n    const _c_sharp_code_gen = () => {\n        return `\n            using System;\n            using Newtonsoft.Json.Linq; // NuGet Newtonsoft.Json - https://www.newtonsoft.com/json\n            using System.Net;\n            using System.Text;\n            using System.IO;\n\n            public class Program\n            {\t\n                static JArray easybase(string easybase_url, string postBody)\n                {\n                    var request = (HttpWebRequest) WebRequest.Create(easybase_url);\n                    request.Method = \"POST\";\n                    request.ContentType = \"application/json\";\n\n                    using (var stream = request.GetRequestStream())\n                    {\n                        stream.Write(Encoding.ASCII.GetBytes(postBody));\n                    }\n\n                    var response = (HttpWebResponse) request.GetResponse();\n                    var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n                    return JArray.Parse(responseString);\n                }\n                \n                public static void Main()\n                {\n                    ${isMapNotAllNulls(typeToValueMap) ?\n                `string postBody = \"{\"\n                        + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                        + \"', true)}\"\n                    + \"}\";\n                    ` : ''}\n                    string url = \"${generateBareUrl(redisID, 'get')}\";\n                    JArray x = easybase(url, ${isMapNotAllNulls(typeToValueMap) ? `postBody` : `\"\"`});\n                    Console.WriteLine(x);\n                    // [ ${key_object_example}, ... ]\n                }\n\n            }\n        `;\n    }\n\n    const _swift_code_gen = () => {\n        return `\n        import UIKit\n\n        struct EasybaseEntry: Codable {\n            ${Object.entries(typeFormats).map(([key, value]) => _generate_language_variables(value, key, \"swift\")).join(\"\\n            \")}\n        }\n\n        func easybase(easybase_url: String, postBody: [String: Any] = [:], completion: @escaping ([EasybaseEntry])->())\n        {\n            let url = URL(string: easybase_url)!\n            var request = URLRequest(url: url)\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            request.httpMethod = \"POST\"\n\n            let jsonData = try? JSONSerialization.data(withJSONObject: postBody)\n            request.httpBody = jsonData\n            \n            let task = URLSession.shared.dataTask(with: request) { data, response, error in\n                guard let data = data, error == nil else {\n                    print(error?.localizedDescription ?? \"No data\")\n                    completion([])\n                    return\n                }\n\n                do {\n                    let res = try JSONDecoder().decode([EasybaseEntry].self, from: data)\n                    completion(res)\n                } catch let error {\n                    completion([])\n                    print(error)\n                }\n            }\n\n            task.resume()\n        }\n\n        let url = \"${generateBareUrl(redisID, 'get')}\"\n        ${isMapNotAllNulls(typeToValueMap) ? `\n        let postBody: [String: Any] = [\n            ${generatePostBody(typeToValueMap, \" : \", ',\\n            ')}\n        ]\n        ` : \"\"}\n        easybase(easybase_url: url${isMapNotAllNulls(typeToValueMap) ? `, postBody: postBody` : \"\"}) { (easybase_data) -> () in\n            print(easybase_data)\n            // [ ${key_object_example}, ... ]\n        }\n        `;\n    }\n\n\n\n    return [\n        {\n            language_name: \"HTML/JS\",\n            code_string: _javascript_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: \"Node.js\",\n            code_string: _node_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Python',\n            code_string: _python_code_gen(),\n            prism_code: 'python',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybase-python\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Java',\n            code_string: _java_code_gen(),\n            prism_code: 'java'\n        },\n        {\n            language_name: 'C#',\n            code_string: _c_sharp_code_gen(),\n            prism_code: 'csharp'\n        },\n        {\n            language_name: 'Swift',\n            code_string: _swift_code_gen(),\n            prism_code: 'swift'\n        }\n    ];\n}\n\nexport const generateREACTLanguageContent = (accessorToColumnTypeMap) => {\n    const _react_code_gen = () => {\n        return `\n        // npm install easybase-react\n\n        import { EasybaseProvider, useEasybase } from 'easybase-react';\n        import ebconfig from \"./ebconfig.js\";\n\n        function Container() {\n            const { Frame, useFrameEffect, configureFrame, sync } = useEasybase();\n            \n            useFrameEffect(() => {\n                console.log(\"Frame changed!\");\n            });\n\n            return (\n                <div>\n                    {Frame().map((ele, index) => <YourComponent {...ele} key={index} /> )}\n                </div>\n            )\n        }\n\n        function App() {\n            return (\n                <EasybaseProvider ebconfig={ebconfig}>\n                    <Container />\n                </EasybaseProvider>\n            );\n        }\n          \n        export default App;\n        `\n    }\n\n    return [\n        {\n            language_name: \"REACT\",\n            code_string: _react_code_gen(),\n            prism_code: 'jsx',\n            footer: \n                <div className=\"d-flex\">\n                    <HelpButtonWithText to=\"https://github.com/easybase/easybase-react\" title=\"Read the Documentation\" />\n                    <HelpButtonWithText className=\"ml-5\" CustomIcon={ChromeReaderModeOutlinedIcon} to=\"https://easybase.io/about/2020/09/20/The-Best-Way-To-Add-A-Database-To-Your-React-React-Native-Apps/\" title=\"Quickstart Tutorial\" />\n                </div>\n        }\n    ];\n}\n\n\nexport const generateNODELanguageContent = (accessorToColumnTypeMap) => {\n    const _node_code_gen = () => {\n        const key_object_example = \"{ \" + Object.keys(accessorToColumnTypeMap).join(\", \") + \" }\";\n\n        return `\n        // npm install easybasejs\n        import Easybase from \"easybasejs\";\n        import ebconfig from \"./ebconfig\"; // Download from integration drawer\n        \n        // Initialize\n        const eb = Easybase.EasybaseProvider({ ebconfig });\n        eb.configureFrame({ limit: 10, offset: 0 });\n        await eb.sync(); // Normalize local and remote changes\n        console.log(eb.Frame());\n        \n        // Edit entry\n        eb.Frame(2).rating = 10;\n        await eb.sync();\n        console.log(eb.Frame()); // [ ${key_object_example}, ... ]\n        \n        // Delete entry\n        eb.Frame().pop();\n        await eb.sync();\n        console.log(eb.Frame());\n        \n        // Add example entry\n        eb.Frame().push(${key_object_example});\n        await eb.sync();\n        console.log(eb.Frame());\n        \n        // Next 10 entries\n        eb.configureFrame({ limit: 10, offset: 10 });\n        await eb.sync();\n        console.log(eb.Frame());\n        `\n    }\n\n    return [\n        {\n            language_name: \"NODE/JS\",\n            code_string: _node_code_gen(),\n            prism_code: 'js',\n            footer: \n                <div className=\"d-flex\">\n                    <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n                    <HelpButtonWithText className=\"ml-5\" CustomIcon={ChromeReaderModeOutlinedIcon} to=\"https://easybase.io/about/2020/09/20/The-Best-Way-To-Add-A-Database-To-Your-React-React-Native-Apps/\" title=\"Quickstart Tutorial\" />\n                </div>\n        }\n    ];\n}","/* eslint-disable no-fallthrough */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport isEmpty from 'lodash/isEmpty';\nimport QueryListGenerator from '../QueryListGenerator';\nimport Prism from 'prismjs/components/prism-core';\nimport * as Container from './IntegratorPopupDialogContents-Container';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nimport 'prismjs/components/prism-markup-templating';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-swift';\nimport 'prismjs/components/prism-csharp';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-jsx';\n\nimport \"prismjs/themes/prism-okaidia.css\";\nimport './CustomCodeStyles.css';\nimport 'prismjs/plugins/normalize-whitespace/prism-normalize-whitespace';\n\nconst HelpButton = ({ to, style, CustomIcon, ...other }) => CustomIcon ? <CustomIcon color=\"disabled\" style={{ cursor: 'pointer', ...style, fontSize: 20 }} onClick={() => window.open(to, \"_blank\")} {...other} /> : <HelpOutlineIcon color=\"disabled\" style={{ cursor: 'pointer', ...style, fontSize: 20 }} onClick={() => window.open(to, \"_blank\")} {...other} />\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <>{children}</>\n            )}\n        </div>\n    );\n}\n\n\nconst IntegratorPopupDialogContent = ({ options, onClose }) => {\n\n    const { redisID, type, typeFormats, queryObject, accessorToColumnTypeMap, defaultValues, authentication, canRead, canWrite, whitelistArray } = options;\n\n    const [selectedTab, setSelectedTab] = useState(1);\n    const [typeToValueMap, setTypeToValueMap] = useState(Object.keys(accessorToColumnTypeMap).reduce((agg, curr) => ({ ...agg, [curr]: null }), {}));\n\n    // GET\n    const [codeLimit, setCodeLimit] = useState(10);\n    const [codeOffset, setCodeOffset] = useState(0);\n    const [isLimitReturnAll, setIsLimitReturnAll] = useState(false);\n\n    // POST\n    const [insertAtEnd, setInsertAtEnd] = useState(false);\n\n    // UPDATE\n    const [updateValues, setUpdateValues] = useState(Object.keys(accessorToColumnTypeMap).reduce((agg, curr) => ({ ...agg, [curr]: null }), {}));\n\n    const classes = Container.useStyles();\n\n    const language_content = useMemo(() => {\n        let fixedTypeToValueMap = {};\n        switch (type) {\n            case \"GET\":\n                fixedTypeToValueMap = { limit: codeLimit, offset: codeOffset, ...typeToValueMap };\n                if (isLimitReturnAll) delete fixedTypeToValueMap.limit;\n                if (codeOffset === 0) delete fixedTypeToValueMap.offset;\n                if (authentication.authActive === true) fixedTypeToValueMap.authentication = \"YOUR_AUTHENTICATION_KEY\";\n                return Container.generateGETLanguageContent(redisID, typeFormats, fixedTypeToValueMap);\n            default:\n                break;\n        }\n\n    }, [redisID, typeFormats, codeLimit, codeOffset, isLimitReturnAll, typeToValueMap, type, insertAtEnd, authentication, updateValues]);\n\n    useEffect(() => {\n        Prism.plugins.NormalizeWhitespace.setDefaults({\n            'remove-trailing': true,\n            'remove-indent': true,\n            'left-trim': true,\n            'right-trim': true,\n        });\n    }, []);\n\n    function getURLElement() {\n        var elements = document.querySelectorAll('span');\n        return Array.prototype.filter.call(elements, function (element) {\n            return RegExp(Container.generateBareUrl(redisID, type.toLowerCase())).test(element.textContent);\n        })[0];\n    }\n\n    function getAuthentationValueElement() {\n        var elements = document.querySelectorAll('span');\n        return Array.prototype.filter.call(elements, function (element) {\n            return RegExp(\"YOUR_AUTHENTICATION_KEY\").test(element.textContent);\n        })[0];\n    }\n\n    useEffect(() => {\n        Prism.highlightAll();\n        try {\n            getURLElement().classList.add('highlight-red');\n        } catch { }\n        try {\n            getAuthentationValueElement().classList.add('highlight-red');\n            getAuthentationValueElement().classList.add('highlight-italic');\n        } catch { }\n    }, [selectedTab, typeFormats, codeLimit, codeOffset, isLimitReturnAll, typeToValueMap, type, insertAtEnd, updateValues]);\n\n    const handleCodeLimitChange = e => {\n        e.target.value >= 0 && setCodeLimit(Number(e.target.value));\n    }\n\n    const handleCodeOffsetChange = e => {\n        e.target.value >= 0 && setCodeOffset(Number(e.target.value));\n    }\n\n    const handleQueryValueChange = (new_val, key) => {\n        setTypeToValueMap(prev => {\n            prev[key] = new_val;\n            return { ...prev };\n        });\n    }\n\n    const handleUpdateValueChange = (new_val, key) => {\n        setUpdateValues(prev => {\n            prev[key] = new_val;\n            return { ...prev };\n        });\n    }\n\n    return (\n        <div style={{ backgroundColor: 'white', width: 1030, maxWidth: 1030, overflowX: \"auto\", overflowY: \"auto\" }}>\n            <Tabs\n                scrollButtons=\"auto\"\n                onChange={(_, newVal) => setSelectedTab(newVal)}\n                variant=\"scrollable\"\n                aria-label=\"language example integration helper tabs\"\n                value={selectedTab}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                classes={{ root: classes.tabsBorder }}\n            >\n                {language_content.map(ele => <Tab label={ele.language_name} key={`${ele.language_name}`} />)}\n            </Tabs>\n            {\n                language_content.map((ele, index) => (\n                    <TabPanel value={selectedTab} index={index} className={classes.refractorRoot} key={`${ele.code_string}`}>\n                        <pre className={classes.codeRoot}>\n                            {typeof ele.code_string === 'string' ?\n                                <code className={`language-${ele.prism_code}`}>\n                                    {ele.code_string}\n                                </code>\n                                :\n                                ele.code_string\n                            }\n                        </pre>\n                        { 'footer' in ele && <div className=\"d-flex align-items-center pt-1\" style={{ height: 30 }}>{ele.footer}</div>}\n                    </TabPanel>\n                ))\n            }\n\n            {type !== \"REACT\" && type !== \"NODE\" &&\n                <div className={classes.refractorRoot}>\n                    <pre className={classes.codeRoot}>\n                        <code>\n                            <span className=\"token punctuation\">Integration ID:</span> <span className=\"token string\">{redisID}</span>\n                        </code>\n                    </pre>\n                </div>\n            }\n\n            {(() => {\n                switch (type) {\n                    case \"GET\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex\">\n                                    <div className=\"d-flex align-items-center\">\n                                        <Typography variant=\"body1\" className=\"pr-3\">offset: </Typography>\n                                        <TextField\n                                            variant=\"outlined\"\n                                            value={codeOffset}\n                                            onChange={handleCodeOffsetChange}\n                                            type=\"number\"\n                                            size=\"small\"\n                                            style={{ width: 75 }}\n                                            className=\"mr-5\"\n                                        />\n\n                                    </div>\n\n                                    <div className=\"d-flex align-items-center\">\n                                        <Typography variant=\"body1\" className=\"pr-3\">limit: </Typography>\n                                        <TextField\n                                            variant=\"outlined\"\n                                            value={codeLimit}\n                                            onChange={handleCodeLimitChange}\n                                            type=\"number\"\n                                            size=\"small\"\n                                            style={{ width: 75 }}\n                                            disabled={isLimitReturnAll}\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox color=\"primary\" checked={isLimitReturnAll} onChange={e => setIsLimitReturnAll(e.target.checked)} />\n                                            }\n                                            label=\"Return all\"\n                                            className=\"ml-1\"\n                                        />\n                                    </div>\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values.</Typography>\n                                            :\n                                            isEmpty(typeToValueMap) ?\n                                                <Typography className=\"my-4\" style={{ color: '#757575' }} >Add the columns that you want to return from this query under 'GET' in the integration editor drawer.</Typography>\n                                                :\n                                                <QueryListGenerator\n                                                    accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                    typeToValueMap={typeToValueMap}\n                                                    queryValueChangeCallback={handleQueryValueChange}\n                                                    largeText\n                                                    formatAccessorNames\n                                                />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"UPDATE\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <Paper elevation={4} className={clsx(\"ml-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/EasyBase-data-types/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">New Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>All matches will be updated with these values.</Typography>\n                                        <QueryListGenerator\n                                            accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                            typeToValueMap={updateValues}\n                                            queryValueChangeCallback={handleUpdateValueChange}\n                                            largeText\n                                        />\n                                    </div>\n                                </Paper>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values via request.</Typography>\n                                            :\n                                            <QueryListGenerator\n                                                accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                typeToValueMap={typeToValueMap}\n                                                queryValueChangeCallback={handleQueryValueChange}\n                                                largeText\n                                            />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"DELETE\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex align-items-center\">\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values via request.</Typography>\n                                            :\n                                            <QueryListGenerator\n                                                accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                typeToValueMap={typeToValueMap}\n                                                queryValueChangeCallback={handleQueryValueChange}\n                                                largeText\n                                            />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"POST\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex align-items-center\">\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox color=\"primary\" checked={insertAtEnd} onChange={e => setInsertAtEnd(e.target.checked)} />\n                                        }\n                                        label=\"Insert record at end of collection\"\n                                        className=\"ml-1\"\n                                    />\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/EasyBase-data-types/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">New Values: </Typography>\n                                        <QueryListGenerator\n                                            accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                            typeToValueMap={typeToValueMap}\n                                            queryValueChangeCallback={handleQueryValueChange}\n                                            largeText\n                                        />\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"TABLE\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex align-items-center\">\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div className=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values via request.</Typography>\n                                            :\n                                            <QueryListGenerator\n                                                accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                typeToValueMap={typeToValueMap}\n                                                queryValueChangeCallback={handleQueryValueChange}\n                                                largeText\n                                            />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"REACT\":\n                    case \"NODE\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between mt-2\", classes.refractorRoot)}>\n                                {!canRead && !canWrite &&\n                                    <Typography variant=\"body1\" color=\"error\"><b>Your current permissions do not allow reading or writing. Enable these in the integration options drawer.</b></Typography>\n                                }\n                            </div>\n                        )\n\n                    default:\n                        break;\n                }\n            })()}\n\n            {type !== \"REACT\" && type !== \"NODE\" &&\n                <div className={classes.refractorRoot} style={{ position: \"relative\", marginTop: 10, marginBottom: 10 }} >\n                    <Typography style={{ position: \"absolute\", bottom: 0 }} variant=\"body2\">Dynamically set these parameters in production.</Typography>\n                </div>\n            }\n\n        </div>\n    );\n};\n\nexport default IntegratorPopupDialogContent;\n","import React from 'react';\nimport IntegratorPopupDialogContent from './IntegratorPopupDialogContent';\n\nconst IntegratorPopup = ({ options, onClose, open }) => {\n    return (\n        <IntegratorPopupDialogContent onClose={onClose} options={options} />\n    );\n};\n\nexport default IntegratorPopup;","import IntegratorPopup from './integrator-popup';\nimport \"./global_styles.css\";\nimport \"./antd_styles.css\";\n\nfunction App() {\n  const example_integration = {\n    redisID: \"YOUR_INTEGRATION_KEY\",\n    typeFormats: { time: \"Total Minutes\", capper: \"T/F\" },\n    queryObject: { time: 1245 },\n    accessorToColumnTypeMap: { time: \"time\", capper: \"boolean\" },\n    type: \"GET\",\n    authentication: { authActive: true, authHash: \"asdf\" }\n  };\n\n  return (\n    <IntegratorPopup\n      open={true}\n      options={example_integration}\n      onClose={() => {}}\n    />\n  );\n}\n\nexport default App;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#556cd6',\n            light: '#8b9aff',\n            dark: '#0c42a4'\n        },\n        secondary: {\n            main: '#ff9e22',\n            light: '#ffcf57',\n            dark: '#c66f00'\n        },\n        error: {\n            main: red.A400,\n        },\n        info : {\n            main: '#eceff1'\n        },\n        success: {\n            main: '#00C851'\n        },\n        background: {\n            default: '#fff',\n        },\n        grey: {\n            main: '#757575'\n        }\n    },\n    typography: {\n    },\n});\n\n/*\n\n    Elevation (dp)      Component\n    12\t                FAB (pressed state)\n    8\t                Raised button (presssed state)\n    6\t                FAB (resting state)\n    2\t                Raised button (resting state)\n\n*/\n\n/**\n * Selected light-blue Color #dbe2ff\n */\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}