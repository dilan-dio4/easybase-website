{"version":3,"sources":["common/utils.js","common/ThreeSwitch.js","QueryListGenerator.js","IntegratorPopupDialogContents-Container.js","IntegratorPopupDialogContent.js","App.js","serviceWorker.js","index.js"],"names":["dayjs","utc","isUTC","e","extend","HelpButton","to","style","other","color","cursor","fontSize","onClick","window","open","HelpButtonWithText","title","className","href","target","rel","dayjsUTC","ThreeSwitchBase","withStyles","root","padding","checked","disabled","input","position","opacity","width","height","top","left","margin","zIndex","name","React","props","ref","autoFocus","classes","checkedIcon","disabledProp","Icon","NullIcon","id","inputProps","inputRef","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value","muiFormControl","useFormControl","hasLabelFor","IconButton","component","clsx","nulled","role","undefined","event","newChecked","ThreeSwitch","size","thumb","capitalize","slashIconSmall","slashIcon","switchBase","track","theme","display","overflow","boxSizing","flexShrink","verticalAlign","colorAdjust","palette","grey","transition","transitions","create","duration","shortest","transform","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","common","black","white","colorSecondary","secondary","sizeSmall","boxShadow","shadows","borderRadius","alignItems","justifyContent","useStyles","makeStyles","singleComponent","spacing","flexGrow","columnHeaderTypography","wordBreak","fontWeight","whiteSpace","textOverflow","QueryListGenerator","accessorToColumnTypeMap","typeToValueMap","queryValueChangeCallback","largeText","formatAccessorNames","Object","entries","map","key","Typography","variant","accessorNameToColumnName","startOf","minute","hour","format","getPopupContainer","trigger","parentNode","allowClear","TextField","split","Number","newVal","tabsBorder","borderBottom","refractorRoot","codeRoot","clearButtonRoot","lighten","marginRight","error","optionsPaper","helpIcon","right","generateBareUrl","redisID","route","isMapNotAllNulls","values","some","val","_python_option","param_string","generatePostBody","keyValConnector","joiner","escapeQuotes","isPython","convertValue","upperFirst","isEmpty","params","forEach","push","ele","replace","join","TabPanel","children","index","hidden","aria-labelledby","IntegratorPopupDialogContent","options","onClose","typeFormats","queryObject","authentication","defaultValues","useState","selectedTab","setSelectedTab","keys","reduce","agg","curr","setTypeToValueMap","codeLimit","setCodeLimit","codeOffset","setCodeOffset","isLimitReturnAll","setIsLimitReturnAll","insertAtEnd","setInsertAtEnd","updateValues","setUpdateValues","Container","language_content","useMemo","fixedTypeToValueMap","limit","offset","authActive","_generate_language_variables","col_type","col_name","lang","key_object_example","language_name","code_string","_javascript_code_gen","prism_code","footer","_node_code_gen","_python_code_gen","pythonCustomQueryMap","_java_code_gen","_c_sharp_code_gen","_swift_code_gen","_html_code_gen","getAuthentationValueElement","elements","document","querySelectorAll","Array","prototype","filter","call","element","RegExp","test","textContent","useEffect","Prism","plugins","NormalizeWhitespace","setDefaults","highlightAll","toLowerCase","getURLElement","classList","add","handleCodeLimitChange","handleCodeOffsetChange","handleQueryValueChange","new_val","prev","handleUpdateValueChange","maxWidth","Tabs","scrollButtons","_","aria-label","indicatorColor","textColor","Tab","label","FormControlLabel","control","Checkbox","Paper","elevation","class","App","createMuiTheme","light","dark","info","success","background","default","typography","ThemeProvider","CssBaseline","time","capper","authHash","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c6468a88.chunk.js","sourcesContent":["/* eslint-disable no-mixed-operators */\nimport React, { useState, useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport { withStyles, useTheme } from '@material-ui/core/styles'\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Zoom from '@material-ui/core/Zoom';\nimport Tooltip from '@material-ui/core/Tooltip';\n\ntry { dayjs.utc().isUTC(); } catch (e) { dayjs.extend(utc); }\n\nexport const FREE_TIER_LIMIT = 10;\n\nexport const closeAnyPickers = function() \n{\n    const open_picker = document.getElementsByClassName('ant-picker-focused')\n    if(open_picker.length === 0) return;\n\n    open_picker[0].getElementsByTagName('input')[0].blur()\n    open_picker[0].getElementsByTagName('input')[0].dispatchEvent(new Event(\"blur\"))\n}\n\nexport const calcTextWidth = function (str, fontFamily, fontSize) {\n    var div = document.createElement(\"div\");\n    div.innerHTML = str;\n    var css = {\n        'position': 'absolute', 'float': 'left', 'white-space': 'nowrap', 'visibility': 'hidden',\n        'font-size': fontSize, 'font-family': fontFamily\n    };\n    for (let k in css) {\n        div.style[k] = css[k];\n    }\n    div = document.body.appendChild(div);\n    var w = div.offsetWidth;\n    document.body.removeChild(div);\n    return w;\n}\n\nfunction debounce(fn, ms) {\n    let timer\n    return _ => {\n        clearTimeout(timer)\n        timer = setTimeout(_ => {\n            timer = null\n            fn.apply(this, arguments)\n        }, ms)\n    };\n}\n\nexport function useWindowSize() {\n    const isClient = typeof window === 'object';\n\n    function getSize() {\n        return {\n            width: isClient ? window.innerWidth : undefined,\n            height: isClient ? window.innerHeight : undefined\n        };\n    }\n\n    const [windowSize, setWindowSize] = useState(getSize);\n\n    useEffect(() => {\n        if (!isClient) {\n            return false;\n        }\n        const handleResize = debounce(function handleResize() {\n            setWindowSize(getSize())\n        }, 100)\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n    return windowSize;\n}\n\nexport function getScrollBarWidth () {\n  var inner = document.createElement('p');\n  inner.style.width = \"100%\";\n  inner.style.height = \"200px\";\n\n  var outer = document.createElement('div');\n  outer.style.position = \"absolute\";\n  outer.style.top = \"0px\";\n  outer.style.left = \"0px\";\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"200px\";\n  outer.style.height = \"150px\";\n  outer.style.overflow = \"hidden\";\n  outer.appendChild (inner);\n\n  document.body.appendChild (outer);\n  var w1 = inner.offsetWidth;\n  outer.style.overflow = 'scroll';\n  var w2 = inner.offsetWidth;\n  if (w1 === w2) w2 = outer.clientWidth;\n\n  document.body.removeChild (outer);\n\n  return (w1 - w2);\n};\n\nexport function uuidv4() {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n        (c ^ window.crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\n\nexport function keyifyQueryObject(o)\n{\n    let result = [];\n    for (let key in o) {\n        result.push(key);\n        if (o[key] && typeof o[key] === \"object\") result.push(...keyifyQueryObject(o[key]));\n    }\n\n    result = result.filter((element) => (isNaN(element) && !element.startsWith('$')) )\n    return result;\n}\n\nexport const getBingMapsStaticImage = (latitude, longitude, width, height) => {\n    const api_key = \"AlC012ub8mZz5uMY2MbCQ9TwLAipNdA_egCPKN4eQIfJ7QrTBNCmeuHhma9qfpY7\"\n    return `http://dev.virtualearth.net/REST/v1/Imagery/Map/Road/${latitude},${longitude}/15?mapSize=${width},${height}&mapLayer=Basemap,Buildings&key=${api_key}`\n\n}\n\nexport const updateDisplayedDataWithoutRender = (setDisplayedData, accessor, recordID, newValue) =>\n{\n    setDisplayedData(prev => {\n        prev.find(ele => ele._id === recordID)[accessor] = newValue;\n        return prev;\n    })\n}\n\nexport const renderRowOnDrawerRightSave = (newRowData, displayedData, setDisplayedData) => {\n\n    const updated_row_index = displayedData.findIndex(ele => ele._id === newRowData._id);\n    if (updated_row_index !== -1)\n    {\n        setDisplayedData(prev => {\n            prev[updated_row_index] = newRowData;\n            return [...prev];\n        });\n    }\n};\n\nexport const isElementInDOM = (elem) => {\n\n    if (elem.offsetWidth + elem.offsetHeight + elem.getBoundingClientRect().height + elem.getBoundingClientRect().width === 0) {\n        return false;\n    }\n    const elemCenter = {\n        x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,\n        y: elem.getBoundingClientRect().top + elem.offsetHeight / 2\n    };\n    if (elemCenter.x < 0) return false;\n    if (elemCenter.x > (document.documentElement.clientWidth || window.innerWidth)) return false;\n    if (elemCenter.y < 0) return false;\n    if (elemCenter.y > (document.documentElement.clientHeight || window.innerHeight)) return false;\n\n    return true;\n}\n\n\nexport const appendToBucketFileName = (fullFileName, newEnding, isFullLink, newExtension = false) => {\n    if (isFullLink)\n    {\n        const full_link_split = fullFileName.split('/');\n        const bucket_hash = full_link_split.pop();\n        let split_file_name = bucket_hash.split('.');\n        if (newExtension === false) return full_link_split.join('/') + '/' + split_file_name[0] + newEnding + '.' + split_file_name[1];\n        else return full_link_split.join('/') + '/' + split_file_name[0] + newEnding + '.' + newExtension; \n    } else {\n        let split_file_name = fullFileName.split('.');\n        if (newExtension === false) return split_file_name[0] + newEnding + '.' + split_file_name[1];\n        else return split_file_name[0] + newEnding + '.' + newExtension;\n    }\n\n}\n\nexport function escapeHtml(string) {\n\n    var matchHtmlRegExp = /[\"'&<>]/\n\n    var str = '' + string\n    var match = matchHtmlRegExp.exec(str)\n\n    if (!match) {\n        return str\n    }\n\n    var escape\n    var html = ''\n    var index = 0\n    var lastIndex = 0\n\n    for (index = match.index; index < str.length; index++) {\n        switch (str.charCodeAt(index)) {\n            case 34: // \"\n                escape = '&quot;'\n                break\n            case 38: // &\n                escape = '&amp;'\n                break\n            case 39: // '\n                escape = '&#39;'\n                break\n            case 60: // <\n                escape = '&lt;'\n                break\n            case 62: // >\n                escape = '&gt;'\n                break\n            default:\n                continue\n        }\n\n        if (lastIndex !== index) {\n            html += str.substring(lastIndex, index)\n        }\n\n        lastIndex = index + 1\n        html += escape\n    }\n\n    return lastIndex !== index\n        ? html + str.substring(lastIndex, index)\n        : html\n}\n\nexport const LoadingOverlay = () => {\n    return (\n        <div className=\"d-flex h-100 w-100 justify-content-center align-items-center\">\n            <CircularProgress color=\"secondary\" />\n        </div>\n    );\n}\n\nexport const HelpButton = ({ to, style, ...other }) => <HelpOutlineIcon color=\"disabled\" style={{ cursor: 'pointer', ...style, fontSize: 20 }} onClick={() => window.open(to, \"_blank\")} {...other} />\n\nexport const HelpButtonWithText = ({ title, to, style, className, ...other }) => <a className={`${className} d-flex align-items-center`} href={to} target=\"_blank\" rel=\"noopener noreferrer\" {...other}><HelpButton to={to} className=\"mr-2\" />{title}</a>\n\nexport const InfoPage = ({children}) => {\n    return (\n        <div className=\"infoPageRoot\">\n            <div className=\"infoPageCardRoot\">\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport const dayjsUTC = () => dayjs.utc();\n\nexport const PaymentTierStatus = ({ billingPeriodTotal }) => {\n\n    const theme = useTheme();\n\n    const nextToTotalView = {\n        width: 24,\n        marginLeft: 8,\n        display: 'flex'\n    };\n\n    const CustomTooltip = withStyles({ tooltip: { maxWidth: 200 } })(Tooltip);\n    const GreenCheckCircleIcon = withStyles({ root: { color: theme.palette.success.main } })(CheckCircleIcon);\n\n    if (billingPeriodTotal === false)\n        return (\n            <div style={nextToTotalView}><CircularProgress color=\"primary\" size={20} /></div>\n        )\n    else\n        return (\n            <Zoom in>\n                <div className=\"d-flex align-items-center\" style={nextToTotalView}>\n                    { billingPeriodTotal > FREE_TIER_LIMIT ?\n                    <>\n                        <ClearIcon />\n                    </>\n                    :\n                    <CustomTooltip arrow title=\"You are within the free $10 quota for this month. No payment is required until exceeding $10, including 'Storage' cost.\" placement=\"right\">\n                        <GreenCheckCircleIcon />\n                    </CustomTooltip> }\n                </div>\n            </Zoom>\n        )\n}","import * as React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport capitalize from 'lodash/capitalize';\nimport useFormControl from '@material-ui/core/FormControl/useFormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nexport const threeSwitchStyles = (theme) => ({\n    /* Styles applied to the root element. */\n    root: {\n        display: 'inline-flex',\n        width: 34 + 12 * 3,\n        height: 14 + 12 * 2,\n        overflow: 'hidden',\n        padding: 12,\n        boxSizing: 'border-box',\n        position: 'relative',\n        flexShrink: 0,\n        zIndex: 0, // Reset the stacking context.\n        verticalAlign: 'middle', // For correct alignment with the text.\n        '@media print': {\n            colorAdjust: 'exact',\n        },\n    },\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        zIndex: 1, // Render above the focus ripple.\n        color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n        transition: theme.transitions.create(['left', 'transform'], {\n            duration: theme.transitions.duration.shortest,\n        }),\n        '&$checked': {\n            transform: 'translateX(32px)',\n        },\n        '&$nulled': {\n            transform: 'translateX(16px)',\n        },\n        '&$disabled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n        },\n        '&$checked + $track': {\n            opacity: 0.5,\n        },\n        '&$disabled + $track': {\n            opacity: theme.palette.type === 'light' ? 0.12 : 0.1,\n        },\n    },\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: {\n        '&$checked': {\n            color: theme.palette.primary.main,\n            '&:hover': {\n                backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n                '@media (hover: none)': {\n                    backgroundColor: 'transparent',\n                },\n            },\n        },\n        '&$disabled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n        },\n        '&$nulled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[800],\n        },\n        '&$checked + $track': {\n            backgroundColor: theme.palette.primary.main,\n        },\n        '&$disabled + $track': {\n            backgroundColor:\n                theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n        },\n        '&$nulled + $track': {\n            backgroundColor: theme.palette.common.white,\n        },\n    },\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: {\n        '&$checked': {\n            color: theme.palette.secondary.main,\n            '&:hover': {\n                backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n                '@media (hover: none)': {\n                    backgroundColor: 'transparent',\n                },\n            },\n        },\n        '&$disabled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],\n        },\n        '&$nulled': {\n            color: theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[800],\n        },\n        '&$checked + $track': {\n            backgroundColor: theme.palette.secondary.main,\n        },\n        '&$disabled + $track': {\n            backgroundColor:\n                theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n        },\n        '&$nulled + $track': {\n            backgroundColor: '#777',\n        },\n    },\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n        width: 50,\n        height: 24,\n        padding: 7,\n        '& $thumb': {\n            width: 16,\n            height: 16,\n        },\n        '& $switchBase': {\n            padding: 4,\n            '&$checked': {\n                transform: 'translateX(26px)',\n            },\n            '&$nulled': {\n                transform: 'translateX(13px)',\n            },\n        },\n    },\n    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: {},\n    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n    disabled: {},\n    /* Pseudo-class applied to the internal SwitchBase component's nulled class. */\n    nulled: {},\n    /* Styles applied to the internal SwitchBase component's input element. */\n    input: {\n        left: '-100%',\n        width: '300%',\n    },\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: {\n        boxShadow: theme.shadows[1],\n        backgroundColor: 'currentColor',\n        width: 20,\n        height: 20,\n        borderRadius: '50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    /* Styles applied to the track element. */\n    track: {\n        height: '100%',\n        width: '100%',\n        borderRadius: 14 / 2,\n        zIndex: -1,\n        transition: theme.transitions.create(['opacity', 'background-color'], {\n            duration: theme.transitions.duration.shortest,\n        }),\n        backgroundColor:\n            theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n        opacity: theme.palette.type === 'light' ? 0.44 : 0.36,\n    },\n    slashIcon: {\n        color: theme.palette.type === 'light' ? '#757575e8' : theme.palette.common.white,\n        fontSize: 20\n    },\n    slashIconSmall : {\n        color: theme.palette.type === 'light' ? '#757575e8' : theme.palette.common.white,\n        fontSize: 14\n    }\n});\n\nconst threeSwitchBaseStyles = {\n    root: {\n        padding: 9,\n    },\n    checked: {},\n    disabled: {},\n    input: {\n        cursor: 'inherit',\n        position: 'absolute',\n        opacity: 0,\n        width: '100%',\n        height: '100%',\n        top: 0,\n        left: 0,\n        margin: 0,\n        padding: 0,\n        zIndex: 1,\n    },\n}\n\nconst ThreeSwitchBase = withStyles(threeSwitchBaseStyles, { name: 'PrivateThreeSwitchBase' })(React.forwardRef(function SwitchBase(props, ref) {\n    const {\n        autoFocus,\n        checkedIcon,\n        classes,\n        className,\n        disabled: disabledProp,\n        Icon,\n        NullIcon,\n        id,\n        inputProps,\n        inputRef,\n        name,\n        onBlur,\n        onChange,\n        onFocus,\n        readOnly,\n        required,\n        tabIndex,\n        type,\n        value,\n        ...other\n    } = props;\n\n    const muiFormControl = useFormControl();\n\n    const handleFocus = (event) => {\n        if (onFocus) {\n            onFocus(event);\n        }\n\n        if (muiFormControl && muiFormControl.onFocus) {\n            muiFormControl.onFocus(event);\n        }\n    };\n\n    const handleBlur = (event) => {\n        if (onBlur) {\n            onBlur(event);\n        }\n\n        if (muiFormControl && muiFormControl.onBlur) {\n            muiFormControl.onBlur(event);\n        }\n    };\n\n    const handleInputChange = (event) => {\n        let newChecked = null;\n        if (value === false) newChecked = null;\n        else if (value === null) newChecked = true;\n        else if (value === true) newChecked = false\n\n        if (onChange) {\n            onChange(event, newChecked);\n        }\n    };\n\n    let disabled = disabledProp;\n\n    if (muiFormControl) {\n        if (typeof disabled === 'undefined') {\n            disabled = muiFormControl.disabled;\n        }\n    }\n\n    const hasLabelFor = type === 'checkbox' || type === 'radio';\n\n    return (\n        <IconButton\n            component=\"span\"\n            className={clsx(\n                classes.root,\n                {\n                    [classes.checked]: value === true,\n                    [classes.nulled]: value === null,\n                    [classes.disabled]: disabled,\n                },\n                className,\n            )}\n            disabled={disabled}\n            tabIndex={null}\n            role={undefined}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            ref={ref}\n            {...other}\n        >\n            <input\n                autoFocus={autoFocus}\n                checked={value}\n                className={classes.input}\n                disabled={disabled}\n                id={hasLabelFor && id}\n                name={name}\n                onChange={handleInputChange}\n                readOnly={readOnly}\n                ref={inputRef}\n                required={required}\n                tabIndex={tabIndex}\n                type={type}\n                value={value}\n                {...inputProps}\n            />\n            {value === null ? NullIcon : Icon}\n        </IconButton>\n    );\n}));\n\n\nconst ThreeSwitch = React.forwardRef(function Switch(props, ref) {\n    const {\n        classes,\n        className,\n        color = 'secondary',\n        size = 'medium',\n        ...other\n    } = props;\n\n    const Icon = <span className={classes.thumb} />;\n    const NullIcon = <span className={classes.thumb}><RemoveIcon className={capitalize(size) === 'Small' ? classes.slashIconSmall : classes.slashIcon} /></span>\n\n    return (\n        <span\n            className={clsx(\n                classes.root,\n                {\n                    [classes[`size${capitalize(size)}`]]: size !== 'medium',\n                },\n                className,\n            )}\n        >\n            <ThreeSwitchBase\n                type=\"checkbox\"\n                Icon={Icon}\n                NullIcon={NullIcon}\n                classes={{\n                    root: clsx(classes.switchBase, classes[`color${capitalize(color)}`]),\n                    input: classes.input,\n                    checked: classes.checked,\n                    disabled: classes.disabled,\n                    nulled: classes.nulled\n                }}\n                ref={ref}\n                {...other}\n            />\n            <span className={classes.track} />\n        </span>\n    );\n});\n\nexport default withStyles(threeSwitchStyles, { name: 'ThreeSwitch' })(ThreeSwitch);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { DatePicker } from 'antd';\nimport { dayjsUTC } from './common/utils';\nimport { TimePicker } from 'antd';\nimport ThreeSwitch from './common/ThreeSwitch';\nimport { accessorNameToColumnName } from 'eb-utils';\n\nconst useStyles = makeStyles(theme => ({\n    singleComponent: {\n        padding: theme.spacing(1, 0),\n        flexGrow: 1,\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    columnHeaderTypography: {\n        wordBreak: 'break-all',\n        fontWeight: 500,\n        fontSize: 17,\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n    },\n\n}))\n\nconst QueryListGenerator = ({ accessorToColumnTypeMap, typeToValueMap, queryValueChangeCallback, largeText = false, formatAccessorNames = false }) => {\n\n    const classes = useStyles();\n\n    return (\n        <>\n            {Object.entries(accessorToColumnTypeMap).map(([key, value]) =>\n                <div className=\"my-1 d-flex align-items-center w-100\" key={`${key}`}>\n                    <Typography className={largeText && classes.columnHeaderTypography} variant={!largeText ? \"body1\": \"inherit\"}>{formatAccessorNames ? accessorNameToColumnName(key) : key}</Typography>\n                    <span className={classes.singleComponent}>\n                        {(() => {\n                            switch (value) {\n                                case \"time\":\n                                    return <TimePicker\n                                        value={typeToValueMap[key] == null ? null : dayjsUTC().startOf('day').minute(typeToValueMap[key])}\n                                        onChange={e => e === null ? queryValueChangeCallback(null, key) : queryValueChangeCallback((e.hour() * 60) + e.minute(), key)}\n                                        format=\"h:mm a\"\n                                        getPopupContainer={trigger => trigger.parentNode}\n                                        allowClear\n                                        className=\"antd-integrator-popup\"\n                                    />\n                                case \"text\":\n                                case \"richtext\":\n                                case \"file\":\n                                case \"image\":\n                                case \"video\":\n                                    return <TextField\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                        style={{ width: 125 }}\n                                        value={typeToValueMap[key] === null ? \"\" : typeToValueMap[key]}\n                                        onChange={e => e.target.value !== \"\" ? queryValueChangeCallback(e.target.value, key) : queryValueChangeCallback(null, key)}\n                                    />\n                                case \"date\":\n                                    return <DatePicker\n                                        value={typeToValueMap[key] == null ? null : dayjsUTC(typeToValueMap[key])}\n                                        onChange={e => e === null ? queryValueChangeCallback(null, key) : queryValueChangeCallback(dayjsUTC(e).startOf('day').format(\"MM-DD-YYYY\"), key)}\n                                        allowClear\n                                        className=\"antd-integrator-popup\"\n                                    />\n                                case \"location\":\n                                    return <div className=\"d-flex align-items-center justify-content-between pt-1 flex-row\" style={{ width: 200 }}>\n                                        <TextField type={'number'} inputProps={{ style: { fontSize: 14 } }} size=\"small\" value={typeToValueMap[key] == null ? \"\" : typeToValueMap[key].split(\",\")[0]} onChange={e => typeToValueMap[key] == null ? queryValueChangeCallback(\"0,0\", key) : queryValueChangeCallback(e.target.value === \"\" ? null : `${e.target.value},${typeToValueMap[key].split(\",\")[1]}`, key)} />\n                                        <TextField type={'number'} inputProps={{ style: { fontSize: 14 } }} size=\"small\" value={typeToValueMap[key] == null ? \"\" : typeToValueMap[key].split(\",\")[1]} onChange={e => typeToValueMap[key] == null ? queryValueChangeCallback(\"0,0\", key) : queryValueChangeCallback(e.target.value === \"\" ? null : `${typeToValueMap[key].split(\",\")[0]},${e.target.value}`, key)} />\n                                    </div>\n                                case \"number\":\n                                    return <TextField\n                                        variant=\"outlined\"\n                                        type=\"number\"\n                                        size=\"small\"\n                                        style={{ width: 125 }}\n                                        value={typeToValueMap[key]}\n                                        onChange={e => e.target.value !== \"\" ? queryValueChangeCallback(Number(e.target.value), key) : queryValueChangeCallback(null, key)}\n                                    />\n                                case \"boolean\":\n                                    return <ThreeSwitch\n                                        value={typeToValueMap[key]}\n                                        onChange={(e, newVal) => queryValueChangeCallback(newVal, key)}\n                                    />\n                                default:\n                                    break;\n                            }\n                        })()}\n                    </span>\n                </div>\n            )}\n        </>\n    )\n\n}\n\nexport default QueryListGenerator;","/* eslint-disable no-fallthrough */\n\nimport React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport upperFirst from 'lodash/upperFirst';\nimport { makeStyles, lighten } from '@material-ui/core/styles';\nimport { HelpButtonWithText } from './common/utils';\n\nexport const useStyles = makeStyles(theme => ({\n    tabsBorder: {\n        borderBottom: '1px solid #e8e8e8',\n    },\n    refractorRoot: {\n        padding: '5px 15px'\n    },\n    codeRoot: {\n        backgroundColor: '#272822',\n        padding: 15,\n        width: '100%',\n        borderRadius: '0.3em',\n    },\n    clearButtonRoot: {\n        color: lighten('#757575', 0.55),\n        borderRadius: 4,\n        display: 'flex',\n        cursor: 'pointer',\n        marginRight: 8,\n        '&:hover': {\n            backgroundColor: theme.palette.error.main,\n            color: '#ffffff'\n        }\n    },\n    singleComponent: {\n        padding: theme.spacing(1, 0),\n        flexGrow: 1,\n        display: 'flex',\n        justifyContent: 'flex-end'\n    },\n    columnHeaderTypography: {\n        wordBreak: 'break-all',\n        fontWeight: 500,\n        fontSize: 18\n    },\n    optionsPaper: {\n        borderRadius: 6,\n        position: 'relative',\n        width: 375,\n    },\n    helpIcon: {\n        position: \"absolute\",\n        top: 12,\n        right: 12,\n    }\n}));\n\nexport const generateBareUrl = (redisID, route) => `https://api.easybase.io/${route}/${redisID}`;\n\nconst isMapNotAllNulls = (typeToValueMap) => Object.values(typeToValueMap).some(val => val !== null);\n\nconst _python_option = (param_string, typeToValueMap) => {\n    if (param_string in typeToValueMap) {\n        let val = typeToValueMap[param_string];\n        if (typeof val === \"boolean\") val = val ? \"True\" : \"False\";\n        return `, ${param_string}=${param_string === \"authentication\" ? `\"${val}\"`: val}`\n    }\n    else return '';\n}\n\nexport const generatePostBody = (map, keyValConnector, joiner, escapeQuotes = false, isPython = false) => {\n\n    const convertValue = (val) => {\n        switch (typeof val) {\n            case \"string\":\n                return `\"${val}\"`;\n            case \"boolean\":\n                if (isPython) return upperFirst(\"\" + val);\n                else return \"\"+val;\n            case \"object\":\n                return isMapNotAllNulls(val) ? generatePostBody(val, keyValConnector, ', \"', escapeQuotes, isPython) : '{}';\n            default:\n                return val;\n        }\n    }\n\n    if (isEmpty(map)) return \"\";\n    const params = [];\n    Object.entries(map).forEach(([key, value]) => {\n        if (value !== null) params.push(`\"${key}\"${keyValConnector}${convertValue(value)}`);\n    })\n\n    if (escapeQuotes)\n        return params.map(ele => ele.replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\")).join(joiner);\n    else\n        return params.join(joiner);\n}\n\nexport const generateTABLELanguageContent = (redisID, typeToValueMap) => {\n\n    const _html_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        return (\n            <>\n                <code className={`language-html`}>\n                    {`\n                    <html>\n                    <head>\n                        Paste this into the <head> of your html:\n                        <script src=\"https://cdn.jsdelivr.net/gh/easybase/easybasejs-visual/dist/bundle.js\"></script>\n                    </head>\n                    <body>\n                        ...\n                        <table id=\"easybase_table\"></table>\n                        ...\n                    </body>\n                    <script>\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-javascript\">\n                    {`\n                    ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n                    const customQuery = {\n                        ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \")}\n                    }` : ''}\n\n                    // To customize table,\n                    // set fourth parameter to object with options from https://datatables.net/reference/option/. \n                    EasyBase.table(\"${redisID}\", \"easybase_table\"${typeToValueMap.authentication ? `, \"${typeToValueMap.authentication}\", null` : \"\"}${isMapNotAllNulls(fixedTypeToValueMap) ? typeToValueMap.authentication ? \", customQuery\" : \", null, null, customQuery\" : \"\"});\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-html\">\n                    {`\n                    </script>\n                    </html>\n                    `}\n                </code>\n            </>\n        );\n    }\n\n    return [\n        {\n            language_name: \"HTML\",\n            code_string: _html_code_gen(),\n            prism_code: 'markup',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        }\n    ]\n}\n\nexport const generateCUSTOMLanguageContent = (redisID, typeToValueMap) => {\n    const _javascript_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        return (\n            <>\n                <code className={`language-html`}>\n                    {`\n                    <html>\n                    <head>\n                        Paste this into the <head> of your html:\n                        <script src=\"https://cdn.jsdelivr.net/gh/easybase/easybasejs-visual@1.0.3/dist/bundle.js\"></script>\n                    </head>\n                    <body>\n                        ...\n                        <table id=\"easybase_table\"></table>\n                        ...\n                    </body>\n                    <script>\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-javascript\">\n                    {`\n                    // To customize custom components,\n                    // set fourth parameter to object with options from https://glidejs.com/docs/options/. \n                    EasyBase.custom(\"${redisID}\", \"easybase_table\"${typeToValueMap.authentication ? `, \"${typeToValueMap.authentication}\", null` : \"\"}, null);\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-html\">\n                    {`\n                    </script>\n                    </html>\n                    `}\n                </code>\n            </>\n        );\n    }\n\n    return [\n        {\n            language_name: \"HTML/JS\",\n            code_string: _javascript_code_gen(),\n            prism_code: 'javascript'\n        }\n    ];\n}\n\nexport const generatePOSTLanguageContent = (redisID, typeToValueMap) => {\n\n    const _javascript_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        delete fixedTypeToValueMap.insertAtEnd;\n        return (\n            <>\n                <code className={`language-html`}>\n                    {`\n                    <html>\n                    <head>\n                        Paste this into the <head> of your html:\n                        <script src=\"https://cdn.jsdelivr.net/npm/easybasejs/dist/bundle.js\"></script>\n                    </head>\n                    <body>\n                        ...\n                    </body>\n                    <script>\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-javascript\">\n                    {`\n                    const newRecord = {\n                        ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n                        \")}\n                    };\n\n                    EasyBase.post(\"${redisID}\", newRecord${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}, ${!!typeToValueMap.insertAtEnd}` : `, null, ${!!typeToValueMap.insertAtEnd}`})\n                        .then(data => {\n                            console.log(data);\n                        });\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-html\">\n                    {`\n                    </script>\n                    </html>\n                    `}\n                </code>\n            </>\n        );\n    }\n\n    const _node_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        delete fixedTypeToValueMap.insertAtEnd;\n\n        return `\n        // npm install --save easybasejs\n\n        var EasyBase = require('easybasejs');\n\n        const newRecord = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \")}\n        };\n\n        EasyBase.post(\"${redisID}\", newRecord${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}, ${!!typeToValueMap.insertAtEnd}` : `, null, ${!!typeToValueMap.insertAtEnd}`})\n            .then(data => {\n                console.log(data);\n            });\n        `\n    }\n\n    const _python_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        delete fixedTypeToValueMap.insertAtEnd;\n\n        return `\n        # pip install easybase-python\n        \n        from easybase-python import get, post, update, delete\n\n        newRecord = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \", false, true)}\n        };\n\n        res = post(\"${redisID}\", newRecord${_python_option('authentication', typeToValueMap)}${_python_option('insertAtEnd', typeToValueMap)})\n        # Successfully inserted new record\n        `;\n    }\n\n    const _java_code_gen = () => {\n        return `\n        import java.net.*;\n        import java.io.*;\n\n        public class HelloWorld{\n\n            public static String easybase(String easybase_url, String postBody) throws Exception {\n                URL url = new URL(easybase_url);\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"POST\");\n                con.setRequestProperty(\"Content-Type\", \"application/json\");\n                con.setRequestProperty(\"Accept\", \"application/json\");\n                con.setDoOutput(true);\n                con.setDoInput(true);\n\n                OutputStream os = con.getOutputStream();\n                byte[] input = postBody.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);           \n\n                BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), \"utf-8\"));\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                return response.toString();\n            }\n\n            public static void main(String[] args) {\n                String easybase_url = \"${generateBareUrl(redisID, 'post')}\";\n\n                String postBody = \"{\"\n                    + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                    + \"', true)}\"\n                + \"}\";\n\n                try {\n                    easybase(easybase_url, postBody);\n                } catch (Exception e) {\n                    System.out.println(e);                    \n                }\n            }\n        }`;\n\n    }\n\n    const _c_sharp_code_gen = () => {\n        return `\n            using System;\n            using System.Net;\n            using System.Text;\n            using System.IO;\n\n            public class Program\n            {\t\n                static void easybase(string easybase_url, string postBody)\n                {\n                    var request = (HttpWebRequest) WebRequest.Create(easybase_url);\n                    request.Method = \"POST\";\n                    request.ContentType = \"application/json\";\n\n                    using (var stream = request.GetRequestStream())\n                    {\n                        stream.Write(Encoding.ASCII.GetBytes(postBody));\n                    }\n\n                    var response = (HttpWebResponse) request.GetResponse();\n                    var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n                }\n                \n                public static void Main()\n                {\n\n                    ${isMapNotAllNulls(typeToValueMap) ?\n                `string postBody = \"{\"\n                        + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                        + \"', true)},\"\n                        + \"\\\\\"updateValues\\\\\" : \" + updateValues\n                    + \"}\";\n                    ` : ''}\n                    string url = \"${generateBareUrl(redisID, 'post')}\";\n                    easybase(url, postBody);\n                }\n\n            }\n        `;\n    }\n\n    const _swift_code_gen = () => {\n        return `\n        import UIKit\n\n        func easybase(easybase_url: String, postBody: [String: Any] = [:], completion: @escaping ([EasyBaseEntry])->())\n        {\n            let url = URL(string: easybase_url)!\n            var request = URLRequest(url: url)\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            request.httpMethod = \"POST\"\n\n            let jsonData = try? JSONSerialization.data(withJSONObject: postBody)\n            request.httpBody = jsonData\n            \n            let task = URLSession.shared.dataTask(with: request) { data, response, error in\n                guard let data = data, error == nil else {\n                    print(error?.localizedDescription ?? \"No data\")\n                    completion([])\n                    return\n                }\n                completion(data)\n                }\n            }\n\n            task.resume()\n        }\n\n        let url = \"${generateBareUrl(redisID, 'post')}\"\n\n        ${isMapNotAllNulls(typeToValueMap) ? `\n        let postBody: [String: Any] = [\n            ${generatePostBody(typeToValueMap, \" : \", ',\\n            ')},\n            \"updateValues\": updateValues\n        ]\n        ` : \"\"}\n        easybase(easybase_url: url, postBody: postBody) { (easybase_data) -> () in\n            print(easybase_data)\n        }\n        `;\n    }\n\n\n\n    return [\n        {\n            language_name: \"HTML/JS\",\n            code_string: _javascript_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: \"Node.js\",\n            code_string: _node_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Python',\n            code_string: _python_code_gen(),\n            prism_code: 'python',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybase-python\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Java',\n            code_string: _java_code_gen(),\n            prism_code: 'java'\n        },\n        {\n            language_name: 'C#',\n            code_string: _c_sharp_code_gen(),\n            prism_code: 'csharp'\n        },\n        {\n            language_name: 'Swift',\n            code_string: _swift_code_gen(),\n            prism_code: 'swift'\n        }\n    ];\n}\n\nexport const generateUPDATELanguageContent = (redisID, typeToValueMap) => {\n\n    const _javascript_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        delete fixedTypeToValueMap.updateValues;\n        return (\n            <>\n                <code className={`language-html`}>\n                    {`\n                    <html>\n                    <head>\n                        Paste this into the <head> of your html:\n                        <script src=\"https://cdn.jsdelivr.net/npm/easybasejs/dist/bundle.js\"></script>\n                    </head>\n                    <body>\n                        ...\n                    </body>\n                    <script>\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-javascript\">\n                    {`\n                    ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n                    const customQuery = {\n                        ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n                        \")}\n                    };\n                    ` : ''}\n                    const updateValues = {\n                        ${'updateValues' in typeToValueMap ? generatePostBody(typeToValueMap.updateValues, \" : \", \",\\n                        \") : ''}\n                    };\n\n                    EasyBase.update(\"${redisID}\", updateValues${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}` : ''}${isMapNotAllNulls(fixedTypeToValueMap) ? typeToValueMap.authentication ? \", customQuery\" : ', null, customQuery' : ''})\n                        .then(data => {\n                            console.log(data);\n                        });\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-html\">\n                    {`\n                    </script>\n                    </html>\n                    `}\n                </code>\n            </>\n        );\n    }\n\n    const _node_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        delete fixedTypeToValueMap.updateValues;\n\n        return `\n        // npm install --save easybasejs\n\n        var EasyBase = require('easybasejs');\n        ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n        const customQuery = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \")}\n        };\n        ` : ''}\n        const updateValues = {\n            ${'updateValues' in typeToValueMap ? generatePostBody(typeToValueMap.updateValues, \" : \", \",\\n            \") : ''}\n        };\n\n        EasyBase.update(\"${redisID}\", updateValues${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}` : ''}${isMapNotAllNulls(fixedTypeToValueMap) ? typeToValueMap.authentication ? \", customQuery\" : ', null, customQuery' : ''})\n            .then(data => {\n                console.log(data);\n            });\n        `\n    }\n\n    const _python_code_gen = () => {\n        const pythonCustomQueryMap = { ...typeToValueMap };\n        delete pythonCustomQueryMap.authentication;\n        delete pythonCustomQueryMap.updateValues;\n\n        return `\n        # pip install easybase-python\n        \n        from easybase-python import get, post, update, delete\n        ${isMapNotAllNulls(pythonCustomQueryMap) ? `\n        query = {\n            ${generatePostBody(pythonCustomQueryMap, \" : \", \",\\n            \", false, true)}\n        }\n        ` : ''}\n        updateValues = {\n            ${'updateValues' in typeToValueMap ? generatePostBody(typeToValueMap.updateValues, \" : \", \",\\n            \", false, true) : ''}\n        };\n\n        res = update(\"${redisID}\", updateValues${_python_option('authentication', typeToValueMap)}${isMapNotAllNulls(pythonCustomQueryMap) ? ', customQuery=query' : ''})})\n        # Successfully deleted records\n        `;\n    }\n\n    const _java_code_gen = () => {\n\n        const updateValues = 'updateValues' in typeToValueMap ? typeToValueMap.updateValues : {};\n        const fixedTypeToValueMap =  {...typeToValueMap };\n        delete fixedTypeToValueMap.updateValues;\n\n        return `\n        import java.net.*;\n        import java.io.*;\n\n        public class HelloWorld{\n\n            public static String easybase(String easybase_url, String postBody) throws Exception {\n                URL url = new URL(easybase_url);\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"POST\");\n                con.setRequestProperty(\"Content-Type\", \"application/json\");\n                con.setRequestProperty(\"Accept\", \"application/json\");\n                con.setDoOutput(true);\n                con.setDoInput(true);\n\n                OutputStream os = con.getOutputStream();\n                byte[] input = postBody.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);           \n\n                BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), \"utf-8\"));\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                return response.toString();\n            }\n\n            public static void main(String[] args) {\n                String easybase_url = \"${generateBareUrl(redisID, 'update')}\";\n\n                String updateValues = \"{\"\n                    + \"${generatePostBody(updateValues, \" : \", ',\"\\n                    + \"', true)}\"\n                + \"}\";\n                ${isMapNotAllNulls(typeToValueMap) ? `\n                String postBody = \"{\"\n                    + \"${generatePostBody(fixedTypeToValueMap, \" : \", ',\"\\n                    + \"', true)},\"\n                    + \"\\\\\"updateValues\\\\\" : \" + updateValues\n                + \"}\";\n                ` : ''}      \n                try {\n                    easybase(easybase_url, ${isMapNotAllNulls(typeToValueMap) ? `postBody` : `\"\"`});\n                } catch (Exception e) {\n                    System.out.println(e);                    \n                }\n            }\n        }`;\n\n    }\n\n    const _c_sharp_code_gen = () => {\n        const updateValues = 'updateValues' in typeToValueMap ? typeToValueMap.updateValues : {};\n        const fixedTypeToValueMap =  {...typeToValueMap };\n        delete fixedTypeToValueMap.updateValues;\n\n        return `\n            using System;\n            using System.Net;\n            using System.Text;\n            using System.IO;\n\n            public class Program\n            {\t\n                static void easybase(string easybase_url, string postBody)\n                {\n                    var request = (HttpWebRequest) WebRequest.Create(easybase_url);\n                    request.Method = \"POST\";\n                    request.ContentType = \"application/json\";\n\n                    using (var stream = request.GetRequestStream())\n                    {\n                        stream.Write(Encoding.ASCII.GetBytes(postBody));\n                    }\n\n                    var response = (HttpWebResponse) request.GetResponse();\n                    var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n                }\n                \n                public static void Main()\n                {\n                    string updateValues = \"{\"\n                        +\"${generatePostBody(updateValues, \" : \", ',\"\\n                        + \"', true)}\"\n                    + \"}\";\n\n                    ${isMapNotAllNulls(typeToValueMap) ?\n                `string postBody = \"{\"\n                        + \"${generatePostBody(fixedTypeToValueMap, \" : \", ',\"\\n                        + \"', true)},\"\n                        + \"\\\\\"updateValues\\\\\" : \" + updateValues\n                    + \"}\";\n                    ` : ''}\n                    string url = \"${generateBareUrl(redisID, 'update')}\";\n                    easybase(url, postBody);\n                }\n\n            }\n        `;\n    }\n\n    const _swift_code_gen = () => {\n        const updateValues = 'updateValues' in typeToValueMap ? typeToValueMap.updateValues : {};\n        const fixedTypeToValueMap =  {...typeToValueMap };\n        delete fixedTypeToValueMap.updateValues;\n\n        return `\n        import UIKit\n\n        func easybase(easybase_url: String, postBody: [String: Any] = [:], completion: @escaping ([EasyBaseEntry])->())\n        {\n            let url = URL(string: easybase_url)!\n            var request = URLRequest(url: url)\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            request.httpMethod = \"POST\"\n\n            let jsonData = try? JSONSerialization.data(withJSONObject: postBody)\n            request.httpBody = jsonData\n            \n            let task = URLSession.shared.dataTask(with: request) { data, response, error in\n                guard let data = data, error == nil else {\n                    print(error?.localizedDescription ?? \"No data\")\n                    completion([])\n                    return\n                }\n                completion(data)\n                }\n            }\n\n            task.resume()\n        }\n\n        let url = \"${generateBareUrl(redisID, 'update')}\"\n\n        let updateValues: [String: Any] = [\n            ${generatePostBody(updateValues, \" : \", ',\\n            ')}\n        ]\n        ${isMapNotAllNulls(typeToValueMap) ? `\n        let postBody: [String: Any] = [\n            ${generatePostBody(fixedTypeToValueMap, \" : \", ',\\n            ')},\n            \"updateValues\": updateValues\n        ]\n        ` : \"\"}\n        easybase(easybase_url: url, postBody: postBody) { (easybase_data) -> () in\n            print(easybase_data)\n        }\n        `;\n    }\n\n\n\n    return [\n        {\n            language_name: \"HTML/JS\",\n            code_string: _javascript_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: \"Node.js\",\n            code_string: _node_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Python',\n            code_string: _python_code_gen(),\n            prism_code: 'python',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybase-python\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Java',\n            code_string: _java_code_gen(),\n            prism_code: 'java'\n        },\n        {\n            language_name: 'C#',\n            code_string: _c_sharp_code_gen(),\n            prism_code: 'csharp'\n        },\n        {\n            language_name: 'Swift',\n            code_string: _swift_code_gen(),\n            prism_code: 'swift'\n        }\n    ];\n}\n\nexport const generateDELETELanguageContent = (redisID, typeToValueMap) => {\n    const _javascript_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        return (\n            <>\n                <code className={`language-html`}>\n                    {`\n                    <html>\n                    <head>\n                        Paste this into the <head> of your html:\n                        <script src=\"https://cdn.jsdelivr.net/npm/easybasejs/dist/bundle.js\"></script>\n                    </head>\n                    <body>\n                        ...\n                    </body>\n                    <script>\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-javascript\">\n                    {`\n                    ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n                    const customQuery = {\n                        ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n                        \")}\n                    }\n                    ` : ''}\n                    EasyBase.Delete(\"${redisID}\"${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}` : ''}${isMapNotAllNulls(fixedTypeToValueMap) ? typeToValueMap.authentication ? \", customQuery\" : ', null, customQuery' : ''})\n                        .then(data => {\n                            console.log(data);\n                        });\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-html\">\n                    {`\n                    </script>\n                    </html>\n                    `}\n                </code>\n            </>\n        );\n    }\n\n    const _node_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        delete fixedTypeToValueMap.authentication;\n        return `\n        // npm install --save easybasejs\n\n        var EasyBase = require('easybasejs');\n        ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n        const customQuery = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \")}\n        }\n        ` : ''}\n        EasyBase.Delete(\"${redisID}\"${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}` : ''}${isMapNotAllNulls(fixedTypeToValueMap) ? typeToValueMap.authentication ? \", customQuery\" : ', null, customQuery' : ''})\n            .then(data => {\n                console.log(data);\n            });\n        `;\n    }\n\n    const _python_code_gen = () => {\n        const pythonCustomQueryMap = { ...typeToValueMap };\n        delete pythonCustomQueryMap.authentication;\n\n        return `\n        # pip install easybase-python\n\n        from easybase-python import get, post, update, delete\n        ${isMapNotAllNulls(pythonCustomQueryMap) ? `\n        query = {\n            ${generatePostBody(pythonCustomQueryMap, \" : \", \",\\n            \", false, true)}\n        }\n        ` : ''}\n        res = delete(\"${redisID}\"${_python_option('authentication', typeToValueMap)}${isMapNotAllNulls(pythonCustomQueryMap) ? ', customQuery=query' : ''})})\n        # Successfully deleted records\n        `;\n    }\n\n    const _java_code_gen = () => {\n\n        return `\n        import java.net.*;\n        import java.io.*;\n\n        public class HelloWorld{\n\n            public static String easybase(String easybase_url, String postBody) throws Exception {\n                URL url = new URL(easybase_url);\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"POST\");\n                con.setRequestProperty(\"Content-Type\", \"application/json\");\n                con.setRequestProperty(\"Accept\", \"application/json\");\n                con.setDoOutput(true);\n                con.setDoInput(true);\n\n                OutputStream os = con.getOutputStream();\n                byte[] input = postBody.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);           \n\n                BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), \"utf-8\"));\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                return response.toString();\n            }\n\n            public static void main(String[] args) {\n                String easybase_url = \"${generateBareUrl(redisID, 'delete')}\";\n                ${isMapNotAllNulls(typeToValueMap) ? `\n                String postBody = \"{\"\n                    + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                    + \"', true)}\"\n                + \"}\";\n                ` : ''}      \n                try {\n                    easybase(easybase_url, ${isMapNotAllNulls(typeToValueMap) ? `postBody` : `\"\"`});\n                } catch (Exception e) {\n                    System.out.println(e);                    \n                }\n            }\n        }`;\n\n    }\n\n    const _c_sharp_code_gen = () => {\n        return `\n            using System;\n            using System.Net;\n            using System.Text;\n            using System.IO;\n\n            public class Program\n            {\t\n                static void easybase(string easybase_url, string postBody)\n                {\n                    var request = (HttpWebRequest) WebRequest.Create(easybase_url);\n                    request.Method = \"POST\";\n                    request.ContentType = \"application/json\";\n\n                    using (var stream = request.GetRequestStream())\n                    {\n                        stream.Write(Encoding.ASCII.GetBytes(postBody));\n                    }\n\n                    var response = (HttpWebResponse) request.GetResponse();\n                    var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n                }\n                \n                public static void Main()\n                {\n                    ${isMapNotAllNulls(typeToValueMap) ?\n                `string postBody = \"{\"\n                        + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                        + \"', true)}\"\n                    + \"}\";\n                    ` : ''}\n                    string url = \"${generateBareUrl(redisID, 'delete')}\";\n                    easybase(url, ${isMapNotAllNulls(typeToValueMap) ? `postBody` : `\"\"`});\n                }\n\n            }\n        `;\n    }\n\n    const _swift_code_gen = () => {\n        return `\n        import UIKit\n\n        func easybase(easybase_url: String, postBody: [String: Any] = [:], completion: @escaping ([EasyBaseEntry])->())\n        {\n            let url = URL(string: easybase_url)!\n            var request = URLRequest(url: url)\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            request.httpMethod = \"POST\"\n\n            let jsonData = try? JSONSerialization.data(withJSONObject: postBody)\n            request.httpBody = jsonData\n            \n            let task = URLSession.shared.dataTask(with: request) { data, response, error in\n                guard let data = data, error == nil else {\n                    print(error?.localizedDescription ?? \"No data\")\n                    completion([])\n                    return\n                }\n                completion(data)\n                }\n            }\n\n            task.resume()\n        }\n\n        let url = \"${generateBareUrl(redisID, 'delete')}\"\n        ${isMapNotAllNulls(typeToValueMap) ? `\n        let postBody: [String: Any] = [\n            ${generatePostBody(typeToValueMap, \" : \", ',\\n            ')}\n        ]\n        ` : \"\"}\n        easybase(easybase_url: url${isMapNotAllNulls(typeToValueMap) ? `, postBody: postBody` : \"\"}) { (easybase_data) -> () in\n            print(easybase_data)\n        }\n        `;\n    }\n\n\n\n    return [\n        {\n            language_name: \"HTML/JS\",\n            code_string: _javascript_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: \"Node.js\",\n            code_string: _node_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Python',\n            code_string: _python_code_gen(),\n            prism_code: 'python',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybase-python\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Java',\n            code_string: _java_code_gen(),\n            prism_code: 'java'\n        },\n        {\n            language_name: 'C#',\n            code_string: _c_sharp_code_gen(),\n            prism_code: 'csharp'\n        },\n        {\n            language_name: 'Swift',\n            code_string: _swift_code_gen(),\n            prism_code: 'swift'\n        }\n    ];\n}\n\nexport const generateGETLanguageContent = (redisID, typeFormats, typeToValueMap) => {\n\n    const _generate_language_variables = (col_type, col_name, lang) => {\n        switch (col_type) {\n            case \"HH:MM 12h\":\n            case \"HH:MM 24h\":\n            case \"String\":\n            case \"RTE\":\n            case \"HTML\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: String?`\n                    case \"java\":\n                        return `String ${col_name};`\n                    default:\n                        break;\n                }\n            case \"URL\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: String?`\n                    case \"java\":\n                        return `String ${col_name};`\n                    default:\n                        break;\n                }\n            case \"MM/DD/YYYY\":\n            case \"YYYY/MM/DD\":\n            case \"dd-mmm-yyyy\":\n            case \"dd.mm.yyyy\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: String?`\n                    case \"java\":\n                        return `String ${col_name};`\n                    default:\n                        break;\n                }\n            case \"Coordinates\":\n            case \"ISO String\":\n            case \"Object\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: String?`\n                    case \"java\":\n                        return `String ${col_name};`\n                    default:\n                        break;\n                }\n            case \"Number\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Float?`\n                    case \"java\":\n                        return `float ${col_name};`\n                    default:\n                        break;\n                }\n            case \"1/0\":\n            case \"Total Minutes\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Int?`\n                    case \"java\":\n                        return `int ${col_name};`\n                    default:\n                        break;\n                }\n            case \"T/F\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Bool?`\n                    case \"java\":\n                        return `boolean ${col_name};`\n                    default:\n                        break;\n                }\n            case \"UNIX Stamp\":\n                switch (lang) {\n                    case \"swift\":\n                        return `var ${col_name}: Int?`\n                    case \"java\":\n                        return `int ${col_name};`\n                    default:\n                        break;\n                }\n            default:\n                break;\n        }\n    }\n\n    const key_object_example = \"{ \" + Object.keys(typeFormats).join(\", \") + \" }\";\n\n    const _javascript_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        const offset = typeToValueMap.offset ? typeToValueMap.offset : 'null';\n        const limit = typeToValueMap.limit ? typeToValueMap.limit : 'null';\n        delete fixedTypeToValueMap.limit;\n        delete fixedTypeToValueMap.offset;\n        delete fixedTypeToValueMap.authentication;\n        return (\n            <>\n                <code className={`language-html`}>\n                    {`\n                    <html>\n                    <head>\n                        Paste this into the <head> of your html:\n                        <script src=\"https://cdn.jsdelivr.net/npm/easybasejs/dist/bundle.js\"></script>\n                    </head>\n                    <body>\n                        ...\n                    </body>\n                    <script>\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-javascript\">\n                    {`\n                    ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n                    const customQuery = {\n                        ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n                        \")}\n                    }\n                    ` : ''}\n                    const offset = ${offset};\n                    const limit = ${limit};\n\n                    EasyBase.get(\"${redisID}\", offset, limit${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}` : ''}${isMapNotAllNulls(fixedTypeToValueMap) ? typeToValueMap.authentication ? \", customQuery\" : ', null, customQuery' : ''})\n                        .then(data => {\n                            console.log(data); // [ ${key_object_example}, ... ]\n                        });\n                    `}\n                </code>\n                <br />\n                <br />\n                <code className=\"language-html\">\n                    {`\n                    </script>\n                    </html>\n                    `}\n                </code>\n            </>\n        );\n    }\n\n    const _node_code_gen = () => {\n        const key_object_example = \"{ \" + Object.keys(typeFormats).join(\", \") + \" }\";\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        const offset = typeToValueMap.offset ? typeToValueMap.offset : 'null';\n        const limit = typeToValueMap.limit ? typeToValueMap.limit : 'null';\n        delete fixedTypeToValueMap.limit;\n        delete fixedTypeToValueMap.offset;\n        delete fixedTypeToValueMap.authentication;\n\n        return `\n        // npm install --save easybasejs\n\n        var EasyBase = require('easybasejs');\n        ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n        const customQuery = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \")}\n        }\n        ` : ''}\n        const offset = ${offset};\n        const limit = ${limit};\n        \n        EasyBase.get(\"${redisID}\", offset, limit${typeToValueMap.authentication ? `, ${typeToValueMap.authentication}` : ''}${isMapNotAllNulls(fixedTypeToValueMap) ? typeToValueMap.authentication ? \", customQuery\" : ', null, customQuery' : '' })\n            .then(data => {\n                console.log(data); // [ ${key_object_example}, ... ]\n            });\n        `;\n    }\n\n    const _python_code_gen = () => {\n        const fixedTypeToValueMap = { ...typeToValueMap };\n        const offset = typeToValueMap.offset ? typeToValueMap.offset : 'None';\n        const limit = typeToValueMap.limit ? typeToValueMap.limit : 'None';\n\n        delete fixedTypeToValueMap.limit;\n        delete fixedTypeToValueMap.offset;\n        delete fixedTypeToValueMap.authentication;\n        return `\n        # pip install easybase-python\n        \n        from easybase-python import get, post, update, delete\n        ${isMapNotAllNulls(fixedTypeToValueMap) ? `\n        customQuery = {\n            ${generatePostBody(fixedTypeToValueMap, \" : \", \",\\n            \", false, true)}\n        }\n        ` : ''}\n        offset = ${offset}\n        limit = ${limit}\n\n        easybase_response = get(\"${redisID}\", offset, limit${_python_option('authentication', typeToValueMap)}${isMapNotAllNulls(fixedTypeToValueMap) ? `${'authentication' in typeToValueMap ? ', customQuery=customQuery' : ', None, customQuery=customQuery'}` : ''}))\n        print(easybase_response) # [ ${key_object_example}, ... ]\n\n        `\n    }\n\n    const _java_code_gen = () => {\n\n        return `\n        import java.net.*;\n        import java.io.*;\n\n        // https://github.com/google/gson\n        import com.google.gson.Gson; \n        import com.google.gson.GsonBuilder;  \n\n        class EasybaseObj {\n            ${Object.entries(typeFormats).map(([key, value]) => _generate_language_variables(value, key, \"java\")).join(\"\\n            \")}\n        }\n\n        public class HelloWorld{\n\n            public static EasybaseObj[] easybase(String easybase_url, String postBody) throws Exception {\n                Gson gson = new Gson();\n                URL url = new URL(easybase_url);\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"POST\");\n                con.setRequestProperty(\"Content-Type\", \"application/json\");\n                con.setRequestProperty(\"Accept\", \"application/json\");\n                con.setDoOutput(true);\n                con.setDoInput(true);\n\n                OutputStream os = con.getOutputStream();\n                byte[] input = postBody.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);           \n\n                BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), \"utf-8\"));\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n\n                return gson.fromJson(response.toString(), EasybaseObj[].class);\n            }\n\n            public static void main(String[] args) {\n                String easybase_url = \"${generateBareUrl(redisID, 'get')}\";\n                ${isMapNotAllNulls(typeToValueMap) ? `\n                String postBody = \"{\"\n                    + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                    + \"', true)}\"\n                + \"}\";\n                ` : ''}      \n                try {\n                    EasybaseObj[] easybase_data = easybase(easybase_url, ${isMapNotAllNulls(typeToValueMap) ? `postBody` : `\"\"`});\n                    System.out.println(easybase_data);\n                    // [ ${key_object_example}, ... ]\n                } catch (Exception e) {\n                    System.out.println(e);\n                    \n                }\n            }\n        }`;\n\n    }\n\n    const _c_sharp_code_gen = () => {\n        return `\n            using System;\n            using Newtonsoft.Json.Linq; // NuGet Newtonsoft.Json - https://www.newtonsoft.com/json\n            using System.Net;\n            using System.Text;\n            using System.IO;\n\n            public class Program\n            {\t\n                static JArray easybase(string easybase_url, string postBody)\n                {\n                    var request = (HttpWebRequest) WebRequest.Create(easybase_url);\n                    request.Method = \"POST\";\n                    request.ContentType = \"application/json\";\n\n                    using (var stream = request.GetRequestStream())\n                    {\n                        stream.Write(Encoding.ASCII.GetBytes(postBody));\n                    }\n\n                    var response = (HttpWebResponse) request.GetResponse();\n                    var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();\n                    return JArray.Parse(responseString);\n                }\n                \n                public static void Main()\n                {\n                    ${isMapNotAllNulls(typeToValueMap) ?\n                `string postBody = \"{\"\n                        + \"${generatePostBody(typeToValueMap, \" : \", ',\"\\n                        + \"', true)}\"\n                    + \"}\";\n                    ` : ''}\n                    string url = \"${generateBareUrl(redisID, 'get')}\";\n                    JArray x = easybase(url, ${isMapNotAllNulls(typeToValueMap) ? `postBody` : `\"\"`});\n                    Console.WriteLine(x);\n                    // [ ${key_object_example}, ... ]\n                }\n\n            }\n        `;\n    }\n\n    const _swift_code_gen = () => {\n        return `\n        import UIKit\n\n        struct EasyBaseEntry: Codable {\n            ${Object.entries(typeFormats).map(([key, value]) => _generate_language_variables(value, key, \"swift\")).join(\"\\n            \")}\n        }\n\n        func easybase(easybase_url: String, postBody: [String: Any] = [:], completion: @escaping ([EasyBaseEntry])->())\n        {\n            let url = URL(string: easybase_url)!\n            var request = URLRequest(url: url)\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            request.httpMethod = \"POST\"\n\n            let jsonData = try? JSONSerialization.data(withJSONObject: postBody)\n            request.httpBody = jsonData\n            \n            let task = URLSession.shared.dataTask(with: request) { data, response, error in\n                guard let data = data, error == nil else {\n                    print(error?.localizedDescription ?? \"No data\")\n                    completion([])\n                    return\n                }\n\n                do {\n                    let res = try JSONDecoder().decode([EasyBaseEntry].self, from: data)\n                    completion(res)\n                } catch let error {\n                    completion([])\n                    print(error)\n                }\n            }\n\n            task.resume()\n        }\n\n        let url = \"${generateBareUrl(redisID, 'get')}\"\n        ${isMapNotAllNulls(typeToValueMap) ? `\n        let postBody: [String: Any] = [\n            ${generatePostBody(typeToValueMap, \" : \", ',\\n            ')}\n        ]\n        ` : \"\"}\n        easybase(easybase_url: url${isMapNotAllNulls(typeToValueMap) ? `, postBody: postBody` : \"\"}) { (easybase_data) -> () in\n            print(easybase_data)\n            // [ ${key_object_example}, ... ]\n        }\n        `;\n    }\n\n\n\n    return [\n        {\n            language_name: \"HTML/JS\",\n            code_string: _javascript_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: \"Node.js\",\n            code_string: _node_code_gen(),\n            prism_code: 'javascript',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybasejs\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Python',\n            code_string: _python_code_gen(),\n            prism_code: 'python',\n            footer: <HelpButtonWithText to=\"https://github.com/easybase/easybase-python\" title=\"Read the Documentation\" />\n        },\n        {\n            language_name: 'Java',\n            code_string: _java_code_gen(),\n            prism_code: 'java'\n        },\n        {\n            language_name: 'C#',\n            code_string: _c_sharp_code_gen(),\n            prism_code: 'csharp'\n        },\n        {\n            language_name: 'Swift',\n            code_string: _swift_code_gen(),\n            prism_code: 'swift'\n        }\n    ];\n}\n\n","/* eslint-disable no-fallthrough */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport clsx from 'clsx';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport isEmpty from 'lodash/isEmpty';\nimport QueryListGenerator from './QueryListGenerator';\nimport Prism from 'prismjs/components/prism-core';\nimport { HelpButton } from './common/utils';\nimport * as Container from './IntegratorPopupDialogContents-Container';\n\nimport 'prismjs/components/prism-markup-templating';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-swift';\nimport 'prismjs/components/prism-csharp';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-markup'\n\nimport \"prismjs/themes/prism-okaidia.css\";\nimport './CustomCodeStyles.css';\nimport 'prismjs/plugins/normalize-whitespace/prism-normalize-whitespace';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <>{children}</>\n            )}\n        </div>\n    );\n}\n\n\nconst IntegratorPopupDialogContent = ({ options, onClose }) => {\n\n    const { redisID, type, typeFormats, queryObject, accessorToColumnTypeMap, defaultValues, authentication } = options;\n\n    const [ selectedTab, setSelectedTab ] = useState(0);\n    const [ typeToValueMap, setTypeToValueMap ] = useState(Object.keys(accessorToColumnTypeMap).reduce((agg, curr) => ({...agg, [curr]: null}), {}));\n\n    // GET\n    const [ codeLimit, setCodeLimit ] = useState(10);\n    const [ codeOffset, setCodeOffset ] = useState(0);\n    const [ isLimitReturnAll, setIsLimitReturnAll ] = useState(false);\n    \n    // POST\n    const [ insertAtEnd, setInsertAtEnd ] = useState(false);\n\n    // UPDATE\n    const [ updateValues, setUpdateValues ] = useState(Object.keys(accessorToColumnTypeMap).reduce((agg, curr) => ({...agg, [curr]: null}), {}));\n\n    const classes = Container.useStyles();\n\n    const language_content = useMemo(() => {\n        let fixedTypeToValueMap = {};\n        switch (type) {\n            case \"GET\":\n                fixedTypeToValueMap = { limit: codeLimit, offset: codeOffset, ...typeToValueMap };\n                if (isLimitReturnAll) delete fixedTypeToValueMap.limit;\n                if (codeOffset === 0) delete fixedTypeToValueMap.offset;\n                if (authentication.authActive === true) fixedTypeToValueMap.authentication = \"YOUR_AUTHENTICATION_KEY\";\n                return Container.generateGETLanguageContent(redisID, typeFormats, fixedTypeToValueMap); \n            case \"UPDATE\":\n                fixedTypeToValueMap = { updateValues, ...typeToValueMap };\n                if (authentication.authActive === true) fixedTypeToValueMap.authentication = \"YOUR_AUTHENTICATION_KEY\";\n                return Container.generateUPDATELanguageContent(redisID, fixedTypeToValueMap);\n            case \"DELETE\":\n                fixedTypeToValueMap = { ...typeToValueMap };\n                if (authentication.authActive === true) fixedTypeToValueMap.authentication = \"YOUR_AUTHENTICATION_KEY\";\n                return Container.generateDELETELanguageContent(redisID, fixedTypeToValueMap);\n            case \"CUSTOM\":\n                fixedTypeToValueMap = { limit: codeLimit, offset: codeOffset, ...typeToValueMap };\n                if (isLimitReturnAll) delete fixedTypeToValueMap.limit;\n                if (codeOffset === 0) delete fixedTypeToValueMap.offset;\n                if (authentication.authActive === true) fixedTypeToValueMap.authentication = \"YOUR_AUTHENTICATION_KEY\";\n                return Container.generateCUSTOMLanguageContent(redisID, fixedTypeToValueMap);\n            case \"POST\":\n                fixedTypeToValueMap = { insertAtEnd, ...typeToValueMap };\n                if (authentication.authActive === true) fixedTypeToValueMap.authentication = \"YOUR_AUTHENTICATION_KEY\";\n                return Container.generatePOSTLanguageContent(redisID, fixedTypeToValueMap);\n            case \"TABLE\":\n                fixedTypeToValueMap = { ...typeToValueMap };\n                if (authentication.authActive === true) fixedTypeToValueMap.authentication = \"YOUR_AUTHENTICATION_KEY\";\n                return Container.generateTABLELanguageContent(redisID, fixedTypeToValueMap);\n            default:\n                break;\n        }\n        \n    }, [ redisID, typeFormats, codeLimit, codeOffset, isLimitReturnAll, typeToValueMap, type, insertAtEnd, authentication, updateValues ]);\n\n    useEffect(() => {\n        Prism.plugins.NormalizeWhitespace.setDefaults({\n            'remove-trailing': true,\n            'remove-indent': true,\n            'left-trim': true,\n            'right-trim': true,\n        });\n    }, []);\n    \n    function getURLElement() {\n        var elements = document.querySelectorAll('span');\n        return Array.prototype.filter.call(elements, function (element) {\n            return RegExp(Container.generateBareUrl(redisID, type.toLowerCase())).test(element.textContent);\n        })[0];\n    }\n\n    function getAuthentationValueElement() {\n        var elements = document.querySelectorAll('span');\n        return Array.prototype.filter.call(elements, function (element) {\n            return RegExp(\"YOUR_AUTHENTICATION_KEY\").test(element.textContent);\n        })[0];\n    }\n\n    useEffect(() => {\n        Prism.highlightAll();\n        try {\n            getURLElement().classList.add('highlight-red');\n        } catch {}\n        try {\n            getAuthentationValueElement().classList.add('highlight-red');\n            getAuthentationValueElement().classList.add('highlight-italic');\n        } catch {}\n    }, [ selectedTab, typeFormats, codeLimit, codeOffset, isLimitReturnAll, typeToValueMap, type, insertAtEnd, updateValues ]);\n\n    const handleCodeLimitChange = e => {\n        e.target.value >= 0 && setCodeLimit(Number(e.target.value));\n    }\n\n    const handleCodeOffsetChange = e => {\n        e.target.value >= 0 && setCodeOffset(Number(e.target.value));\n    }\n\n    const handleQueryValueChange = (new_val, key) => {\n        setTypeToValueMap(prev => {\n            prev[key] = new_val;\n            return {...prev};\n        });\n    }\n\n    const handleUpdateValueChange = (new_val, key) => {\n        setUpdateValues(prev => {\n            prev[key] = new_val;\n            return {...prev};\n        });\n    }\n\n    return (\n        <div style={{ backgroundColor: 'white', width: 1030, maxWidth: 1030 }}>\n            <Tabs\n                scrollButtons=\"auto\"\n                onChange={(_, newVal) => setSelectedTab(newVal)} \n                variant=\"scrollable\" \n                aria-label=\"language example integration helper tabs\"\n                value={selectedTab}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                classes={{ root: classes.tabsBorder }}\n            >\n                { language_content.map(ele => <Tab label={ele.language_name} key={`${ele.language_name}`} />) }\n            </Tabs>\n            {\n                language_content.map((ele, index) => (\n                    <TabPanel value={selectedTab} index={index} className={classes.refractorRoot} key={`${ele.code_string}`}>\n                        <pre className={classes.codeRoot}>\n                            { typeof ele.code_string === 'string' ?\n                                <code className={`language-${ele.prism_code}`}>\n                                    {ele.code_string}\n                                </code>\n                                :\n                                ele.code_string\n                            }\n                        </pre>\n                        { 'footer' in ele && <div className=\"d-flex align-items-center pt-1\" style={{ height: 30 }}>{ele.footer}</div> }\n                    </TabPanel>\n                ))\n            }\n\n            <div className={classes.refractorRoot}>\n                <pre className={classes.codeRoot}>\n                    <code>\n                        <span className=\"token punctuation\">Integration ID:</span> <span className=\"token string\">{redisID}</span>\n                    </code>\n                </pre>\n            </div>\n\n            {(() => {\n                switch (type) {\n                    case \"GET\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex\">\n                                    <div className=\"d-flex align-items-center\">\n                                        <Typography variant=\"body1\" className=\"pr-3\">offset: </Typography>\n                                        <TextField\n                                            variant=\"outlined\"\n                                            value={codeOffset}\n                                            onChange={handleCodeOffsetChange}\n                                            type=\"number\"\n                                            size=\"small\"\n                                            style={{ width: 75 }}\n                                            className=\"mr-5\"\n                                        />\n\n                                    </div>\n\n                                    <div className=\"d-flex align-items-center\">\n                                        <Typography variant=\"body1\" className=\"pr-3\">limit: </Typography>\n                                        <TextField\n                                            variant=\"outlined\"\n                                            value={codeLimit}\n                                            onChange={handleCodeLimitChange}\n                                            type=\"number\"\n                                            size=\"small\"\n                                            style={{ width: 75 }}\n                                            disabled={isLimitReturnAll}\n                                        />\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox color=\"primary\" checked={isLimitReturnAll} onChange={e => setIsLimitReturnAll(e.target.checked)} />\n                                            }\n                                            label=\"Return all\"\n                                            className=\"ml-1\"\n                                        />\n                                    </div>\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values.</Typography>\n                                            :\n                                            isEmpty(typeToValueMap) ?\n                                                <Typography className=\"my-4\" style={{ color: '#757575' }} >Add the columns that you want to return from this query under 'GET' in the integration editor drawer.</Typography>\n                                                :\n                                                <QueryListGenerator\n                                                    accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                    typeToValueMap={typeToValueMap}\n                                                    queryValueChangeCallback={handleQueryValueChange}\n                                                    largeText\n                                                    formatAccessorNames\n                                                />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"UPDATE\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <Paper elevation={4} className={clsx(\"ml-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/EasyBase-data-types/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">New Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>All matches will be updated with these values.</Typography>\n                                            <QueryListGenerator\n                                                accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                typeToValueMap={updateValues}\n                                                queryValueChangeCallback={handleUpdateValueChange}\n                                                largeText\n                                            />\n                                    </div>\n                                </Paper>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values via request.</Typography>\n                                            :\n                                            <QueryListGenerator\n                                                accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                typeToValueMap={typeToValueMap}\n                                                queryValueChangeCallback={handleQueryValueChange}\n                                                largeText\n                                            />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"DELETE\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex align-items-center\">\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values via request.</Typography>\n                                            :\n                                            <QueryListGenerator\n                                                accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                typeToValueMap={typeToValueMap}\n                                                queryValueChangeCallback={handleQueryValueChange}\n                                                largeText\n                                            />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"POST\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex align-items-center\">\n                                    <FormControlLabel\n                                        control={\n                                            <Checkbox color=\"primary\" checked={insertAtEnd} onChange={e => setInsertAtEnd(e.target.checked)} />\n                                        }\n                                        label=\"Insert record at end of collection\"\n                                        className=\"ml-1\"\n                                    />\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/EasyBase-data-types/\" />\n                                    <div class=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">New Values: </Typography>\n                                        <QueryListGenerator\n                                            accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                            typeToValueMap={typeToValueMap}\n                                            queryValueChangeCallback={handleQueryValueChange}\n                                            largeText\n                                        />\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    case \"TABLE\":\n                        return (\n                            <div className={clsx(\"d-flex align-items-start justify-content-space-between\", classes.refractorRoot)}>\n                                <div className=\"ml-2 d-flex align-items-center\">\n                                </div>\n\n                                <Paper elevation={4} className={clsx(\"mr-4\", classes.optionsPaper)}>\n                                    <HelpButton className={classes.helpIcon} to=\"https://easybase.io/about/2020/09/15/Customizing-query-values/\" />\n                                    <div className=\"px-4 py-2\">\n                                        <Typography variant=\"h6\" className=\"mt-3\">Customize Query Values: </Typography>\n                                        <Typography variant=\"body2\" className=\"mt-1 mb-4\" style={{ color: '#757575' }}>Overwrite the values in an imported query.</Typography>\n                                        {isEmpty(queryObject) ?\n\n                                            <Typography className=\"my-4\" style={{ color: '#757575' }} >Import a query to customize values via request.</Typography>\n                                            :\n                                            <QueryListGenerator\n                                                accessorToColumnTypeMap={accessorToColumnTypeMap}\n                                                typeToValueMap={typeToValueMap}\n                                                queryValueChangeCallback={handleQueryValueChange}\n                                                largeText\n                                            />\n                                        }\n                                    </div>\n                                </Paper>\n                            </div>\n                        )\n                    default:\n                        break;\n                }\n            })()}\n            <div style={{ height: 30 }}></div>\n        </div>\n    );\n};\n\nexport default IntegratorPopupDialogContent;","import React from 'react';\nimport './App.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport IntegratorPopupDialogContent from './IntegratorPopupDialogContent';\nimport './common/global_styles.css';\nimport './common/antd_styles.css';\n\nfunction App() {\n\n  const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#556cd6',\n            light: '#8b9aff',\n            dark: '#0c42a4'\n        },\n        secondary: {\n            main: '#ff9e22',\n            light: '#ffcf57',\n            dark: '#c66f00'\n        },\n        error: {\n            main: '#FF0000',\n        },\n        info: {\n            main: '#eceff1'\n        },\n        success: {\n            main: '#00C851'\n        },\n        background: {\n            default: '#fff',\n        },\n        grey: {\n            main: '#757575'\n        }\n    },\n    typography: {\n    },\n  });\n\n\n  const example_integration = {\n    redisID: \"YOUR_INTEGRATION_KEY\",\n    typeFormats: { time: \"Total Minutes\", capper: \"T/F\" },\n    queryObject: { time: 1245 },\n    accessorToColumnTypeMap: { time: \"time\", capper: \"boolean\" },\n    type: \"GET\",\n    authentication: { authActive: true, authHash: \"asdf\" }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <IntegratorPopupDialogContent options={example_integration} onClose={() => {}}/>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}